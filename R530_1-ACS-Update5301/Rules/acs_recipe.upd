#============================================================================
#       Programmer :    
#       Name       :    acs_recipe.upd
#       Purpose    :    Create and Update Recipe for ACS
#============================================================================
# Rev.    Date:    Who   Description
# ---  --------   ----  -----------------------------------------------------
#   1   01/27/09   NJN  OptiACS: Initial Release
#   2   08/06/09   BRN  Include the new columns factor and seq_num into acs_recipe_det
#                        
# ---  --------   ----  -----------------------------------------------------
DEFINE MILL ENV;
DEFINE mx_timestamp long;
DEFINE found_one long;
DEFINE item_quantity double;
DEFINE tot_factor double;

MX * ST

	echo "Starting Mxupdate for ACS Recipe Management";

NO * EXECUTE
#       This rule is here so MxUpdate see's the types of the
#       feilds being inserted. It will never be executed.
        select * from recipe;
        select * from acs_recipe;
        select * from acs_recipe_det;
        select * from acs_recipe_act;
        select * from acs_recipe_act_det;

* * *
	LET ts_create = {time of day};

# Create new production recipe
RECIPE * PRODRECHDR
	LET ts_modified = {time of day};
	call create_prod_recipe_hdr();
	call create_prod_recipe_det();

# Update production recipe header
RECIPE * UPDRECHDR
	LET ts_modified = {time of day};
	call update_prod_recipe_hdr();

# Resync production recipe with the chemical recipe
RECIPE * RECALC
	LET ts_modified = {time of day};
	call recalc_prod_recipe();

# Update production recipe detail
RECIPE * UPDRECDET
	LET ts_modified = {time of day};
	call update_prod_recipe_det();

# Split production recipe detail
RECIPE * SPLITDET
	call set_def_acs_recipe_det();
	call insert_acs_recipe_det();

# Delete production recipe detail
RECIPE * DELDET
		delete from acs_recipe_det
		where mill_id = $mill_id 
			and machine_type = $machine_type 
			and machine_id = $machine_id 
			and grade_spec_made = $grade_spec_made 
			and class = $class 
			and sim_id = $sim_id
			and recipe_prod_id = $recipe_prod_id
			and raw_matl_grp_id = $raw_matl_grp_id 
			and raw_matl_id = $raw_matl_id
			and seq_num = $seq_num;

# Create new active production recipe
RECIPE * NEWACTREC
	LET ts_modified = {time of day};
	call create_act_recipe();

# Delete active production recipe
RECIPE * DELACTREC
	LET ts_modified = {time of day};
	call del_act_recipe();

SUBROUTINE create_prod_recipe_hdr()
		insert into acs_recipe
		(mill_id, machine_type, machine_id, grade_spec_made, class, sim_id, 
		recipe_prod_id, recipe_prod_name, active_flag, ts_modified, ts_create)
		values
		($mill_id, $machine_type, $machine_id, $grade_spec_made, $class, $sim_id, 
		$recipe_prod_id, $recipe_prod_name, 'Y', 0 ,$ts_create);

END SUBROUTINE

SUBROUTINE create_prod_recipe_det()

            foreach 
			select raw_matl_grp_id, raw_matl_id
				from recipe
				where mill_id = $mill_id 
					and machine_type = $machine_type 
					and machine_id = $machine_id 
					and grade_spec_made = $grade_spec_made 
					and class = $class 
					and sim_id = $sim_id
					and active_flag = 'Y';

			call set_def_acs_recipe_det();
			call insert_acs_recipe_det();

		end foreach

END SUBROUTINE

SUBROUTINE update_prod_recipe_hdr()

		update acs_recipe
		set recipe_prod_name = $recipe_prod_name , ts_modified = $ts_modified, active_flag = $active_flag
		where mill_id = $mill_id
			and machine_type = $machine_type
			and machine_id = $machine_id 
			and grade_spec_made = $grade_spec_made
			and class = $class
			and sim_id = $sim_id
			and recipe_prod_id = $recipe_prod_id;

END SUBROUTINE

SUBROUTINE update_prod_recipe_det()

# Check if the record exists
	select count(*) cnt
		from acs_recipe_det
		where mill_id = $mill_id 
			and machine_type = $machine_type 
			and machine_id = $machine_id 
			and grade_spec_made = $grade_spec_made 
			and class = $class 
			and sim_id = $sim_id
			and recipe_prod_id = $recipe_prod_id
			and raw_matl_grp_id = $raw_matl_grp_id 
			and raw_matl_id = $raw_matl_id
			and seq_num = $seq_num;
	if ($cnt > 0) then
		update acs_recipe_det
			set product_code_id = $product_code_id,
			factor = $factor,
			warehouse_id = $warehouse_id,
			whse_zone_id = $whse_zone_id,
			bay_id = $bay_id,
			prod_route_id = $prod_route_id, 
			ts_modified = $ts_modified
		where mill_id = $mill_id 
			and machine_type = $machine_type 
			and machine_id = $machine_id 
			and grade_spec_made = $grade_spec_made 
			and class = $class 
			and sim_id = $sim_id
			and recipe_prod_id = $recipe_prod_id
			and raw_matl_grp_id = $raw_matl_grp_id 
			and raw_matl_id = $raw_matl_id
			and seq_num = $seq_num;
	else

		call insert_acs_recipe_det();
	
	end if

END SUBROUTINE


SUBROUTINE create_act_recipe()

# Check if the creation is possible
		let go_on = 1;
		select count(*) cnt
			from acs_recipe_act
			where mill_id = $mill_id 
				and machine_type = $machine_type 
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made 
				and ts_begin = $ts_begin;
		if ($cnt > 0) then
			let go_on = 0;
		end if

# Get the previous active recipe
	if ($go_on =1) then
		select ts_end found_ts_end, ts_begin found_ts_begin 
			from acs_recipe_act
			where mill_id = $mill_id 
				and machine_type = $machine_type 
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made 
				and ts_begin < $ts_begin 
				order by ts_begin desc;

		if ($success = 1) then
# Close the record found with the ts_begin of the new Active Prod
			update acs_recipe_act
				set ts_end = $ts_begin
				where mill_id = $mill_id 
					and machine_type = $machine_type 
					and machine_id = $machine_id 
					and grade_spec_made = $grade_spec_made 
					and ts_begin = $found_ts_begin;
# Use the end date of the record found				
			let ts_end = $found_ts_end;
		else
# This is the first record for this recipe
		end if

# Create the record
		select recipe_prod_name
			from acs_recipe
			where mill_id = $mill_id 
				and machine_type = $machine_type 
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made 
				and class = $class 
				and sim_id = $sim_id
				and recipe_prod_id = $recipe_prod_id;
# Create the master record
		insert into acs_recipe_act
			(mill_id, machine_type, machine_id, grade_spec_made, class, sim_id, 
			recipe_prod_id, recipe_prod_name, ts_begin, ts_end, ts_modified, ts_create)
			values
			($mill_id, $machine_type, $machine_id, $grade_spec_made, $class, $sim_id, 
			$recipe_prod_id, $recipe_prod_name, $ts_begin, $ts_end, 0, $ts_create);

# Create the item records detail
		foreach select 	raw_matl_grp_id, raw_matl_id, seq_num, product_code_id, 
					warehouse_id, whse_zone_id, bay_id, prod_route_id, factor
			from acs_recipe_det
			where mill_id = $mill_id 
				and machine_type = $machine_type 
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made 
				and class = $class 
				and sim_id = $sim_id
				and recipe_prod_id = $recipe_prod_id;

			echo BRICE 1111 $raw_matl_grp_id, $raw_matl_id, $seq_num;
			
# Get quantity from the recipe
			select quantity
				from recipe
				where mill_id = $mill_id 
					and machine_type = $machine_type 
					and machine_id = $machine_id 
					and grade_spec_made = $grade_spec_made 
					and class = $class 
					and sim_id = $sim_id
					and raw_matl_grp_id = $raw_matl_grp_id
					and raw_matl_id = $raw_matl_id;

# Calculate the quantity based upon the total factor
				select sum(factor) tot_factor
					from acs_recipe_det
					where mill_id = $mill_id 
						and machine_type = $machine_type 
						and machine_id = $machine_id 
						and grade_spec_made = $grade_spec_made 
						and class = $class 
						and sim_id = $sim_id
						and recipe_prod_id = $recipe_prod_id
						and raw_matl_grp_id = $raw_matl_grp_id
						and raw_matl_id = $raw_matl_id;

				echo BRICE 1 if ($tot_factor = 0) then;

				if ($tot_factor = 0) then
					let item_quantity = 0;
				else
					let item_quantity = $quantity * ($factor / $tot_factor) ;
					let item_quantity = $item_quantity:"###############.###";
				end if

				echo BRICE 	11	$item_quantity;		
				
				insert into acs_recipe_act_det
					(mill_id, machine_type, machine_id, grade_spec_made, class, sim_id, raw_matl_grp_id, raw_matl_id, 
					recipe_prod_id, product_code_id, prod_route_id, quantity, warehouse_id, whse_zone_id, bay_id,
					ts_begin, ts_modified, ts_create, seq_num, factor)
				values
					($mill_id, $machine_type, $machine_id, $grade_spec_made, $class, $sim_id, $raw_matl_grp_id, $raw_matl_id, 
					$recipe_prod_id, $product_code_id, $prod_route_id, $item_quantity, $warehouse_id, $whse_zone_id, $bay_id,
					$ts_begin, 0, $ts_create, $seq_num, $factor);
	
		end foreach

# Calculate the rounding value to make sure the sum is 100%
		foreach select raw_matl_grp_id, raw_matl_id
				from acs_recipe_act_det
				where mill_id = $mill_id 
					and machine_type = $machine_type 
					and machine_id = $machine_id 
					and grade_spec_made = $grade_spec_made 
					and ts_begin = $ts_begin
					and seq_num = 1;

				select quantity
					from recipe
					where mill_id = $mill_id 
						and machine_type = $machine_type 
						and machine_id = $machine_id 
						and grade_spec_made = $grade_spec_made 
						and class = $class 
						and sim_id = $sim_id
						and raw_matl_grp_id = $raw_matl_grp_id
						and raw_matl_id = $raw_matl_id;

				select sum(quantity) sum_quantity
					from acs_recipe_act_det
					where mill_id = $mill_id 
						and machine_type = $machine_type 
						and machine_id = $machine_id 
						and grade_spec_made = $grade_spec_made 
						and ts_begin = $ts_begin
						and raw_matl_grp_id = $raw_matl_grp_id
						and raw_matl_id = $raw_matl_id;

				update acs_recipe_act_det
					set quantity = quantity + $quantity - $sum_quantity
					where mill_id = $mill_id 
						and machine_type = $machine_type 
						and machine_id = $machine_id 
						and grade_spec_made = $grade_spec_made 
						and ts_begin = $ts_begin
						and raw_matl_grp_id = $raw_matl_grp_id
						and raw_matl_id = $raw_matl_id
						and seq_num = 1;
		end foreach


	end if

END SUBROUTINE

SUBROUTINE del_act_recipe()

# Check if the deletion is possible
		let go_on = 1;
		let mx_timestamp = {time};

		if ($ts_begin < $mx_timestamp) then
			let go_on = 0;
		end if

	if ($go_on =1) then

# Get the previous active recipe
		select ts_begin found_ts_begin 
			from acs_recipe_act
			where mill_id = $mill_id 
				and machine_type = $machine_type 
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made 
				and ts_begin < $ts_begin 
				order by ts_begin desc;

		if ($success = 1) then
# Close the record found with the ts_end of the deleted Active Prod
			update acs_recipe_act
				set ts_end = $ts_end
				where mill_id = $mill_id 
					and machine_type = $machine_type 
					and machine_id = $machine_id 
					and grade_spec_made = $grade_spec_made 
					and ts_begin = $found_ts_begin;
		else
# This is the first record for this recipe
		end if

		delete from acs_recipe_act
				where mill_id = $mill_id 
				and machine_type = $machine_type 
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made 
				and ts_begin = $ts_begin;

		delete from acs_recipe_act_det
				where mill_id = $mill_id 
				and machine_type = $machine_type 
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made 
				and ts_begin = $ts_begin;
	end if

END SUBROUTINE

SUBROUTINE insert_acs_recipe_det()

# Get the seq_num
	select seq_num
		from acs_recipe_det	
		where mill_id = $mill_id 
			and machine_type = $machine_type 
			and machine_id = $machine_id 
			and grade_spec_made = $grade_spec_made 
			and class = $class 
			and sim_id = $sim_id
			and recipe_prod_id = $recipe_prod_id
			and raw_matl_grp_id = $raw_matl_grp_id 
			and raw_matl_id = $raw_matl_id
			order by seq_num desc;

	if ($success = 1) then
		let seq_num = $seq_num + 1;
	else
		let seq_num = 1;
	end if	

	insert into acs_recipe_det
		(mill_id, machine_type, machine_id, grade_spec_made, class, sim_id, raw_matl_grp_id, raw_matl_id, 
		recipe_prod_id, seq_num, factor, product_code_id, prod_route_id,
		warehouse_id, whse_zone_id, bay_id, ts_modified, ts_create)
	values
		($mill_id, $machine_type, $machine_id, $grade_spec_made, $class, $sim_id, $raw_matl_grp_id, $raw_matl_id, 
		$recipe_prod_id, $seq_num, $factor, $product_code_id, $prod_route_id,  
		$warehouse_id, $whse_zone_id, $bay_id, 0 ,$ts_create);

END SUBROUTINE


SUBROUTINE recalc_prod_recipe()

# Set date modified for the production recipe
	update acs_recipe
	set ts_modified = $ts_modified
	where mill_id = $mill_id
		and machine_type = $machine_type
		and machine_id = $machine_id 
		and grade_spec_made = $grade_spec_made
		and class = $class
		and sim_id = $sim_id
		and recipe_prod_id = $recipe_prod_id;

# Delete from production recipe what is not active anymore in the chemical recipe
	Foreach select distinct raw_matl_grp_id, raw_matl_id
			from acs_recipe_det
			where mill_id = $mill_id
				and machine_type = $machine_type
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made
				and class = $class
				and sim_id = $sim_id
				and recipe_prod_id = $recipe_prod_id;
			
		select count(*) cnt
			from acs_stdrecipe_view
			where mill_id = $mill_id
				and machine_type = $machine_type
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made
				and class = $class
				and sim_id = $sim_id
				and raw_matl_grp_id = $raw_matl_grp_id 
				and raw_matl_id = $raw_matl_id;

		if ($cnt = 0) then
			delete from acs_recipe_det
				where mill_id = $mill_id
					and machine_type = $machine_type
					and machine_id = $machine_id 
					and grade_spec_made = $grade_spec_made
					and class = $class
					and sim_id = $sim_id
					and raw_matl_grp_id = $raw_matl_grp_id 
					and raw_matl_id = $raw_matl_id;
		end if
	End foreach

# Add into the production recipe what is new from the chemical recipe
	Foreach select raw_matl_grp_id, raw_matl_id, quantity
			from acs_stdrecipe_view
			where mill_id = $mill_id
				and machine_type = $machine_type
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made
				and class = $class
				and sim_id = $sim_id;
			
		select count(*) cnt
			from acs_recipe_det
			where mill_id = $mill_id
				and machine_type = $machine_type
				and machine_id = $machine_id 
				and grade_spec_made = $grade_spec_made
				and class = $class
				and sim_id = $sim_id
				and recipe_prod_id = $recipe_prod_id
				and raw_matl_grp_id = $raw_matl_grp_id 
				and raw_matl_id = $raw_matl_id;

		if ($cnt = 0) then
# Add the record
			call set_def_acs_recipe_det();
			call insert_acs_recipe_det();
		end if
	End foreach

END SUBROUTINE

SUBROUTINE set_def_acs_recipe_det()

# Set the defaults
			let factor = 1;
			let product_code_id = " ";
######### If Intermediare Raw Matl then look for default ProdRouteID
			select class int_class, grade_spec int_grade_spec
				from raw_matl
				where raw_matl_grp_id = $raw_matl_grp_id
				and raw_matl_id = $raw_matl_id;
			if ($int_class = "I") then
				let found_one = 0;
				foreach select machine_type int_machine_type, machine_id int_machine_id, prod_route_id int_prod_route_id
					from acs_prod_route
					where mill_id = $mill_id 
						and mach_type_dest = $machine_type 
						and mach_id_dest = $machine_id
						and active_flag = 'Y';

					select count(*) cnt
						from recipe
						where mill_id = $mill_id 
							and machine_type = $int_machine_type 
							and machine_id = $int_machine_id 
							and grade_spec_made = $int_grade_spec
							and active_flag = 'Y';

						if ($cnt > 0) then
							let prod_route_id = $int_prod_route_id;
							let found_one = $found_one + 1;
						end if
				end foreach

				if ($found_one = 1) then
					let prod_route_id = $prod_route_id;
				else
					let prod_route_id = "000";
				end if
			else
				let prod_route_id = "000";
			end if

			let warehouse_id  = " ";
			whse_zone_id = " ";
			bay_id = " ";

END SUBROUTINE

