#  MxUpdate Rules for acs_build_recipe_dev.
#
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#   1.0  12/17/09  GVG      Initial release
#   2.0  01/12/10  GVG      Changed grade_spec_parent to grade_spec
#   3.0  01/15/10  GVG      Get Machine ID, Machine Type, and Mill ID from acs_jumbo_recipe for acs_direct_cost
#   4.0  01/21/10  GVG      Use cons_mill_id, cons_machine_type, cons_machine_id in acs_cost to get actual consumption values
#   5.0  04/02/10  GVG      Do not allow divide by 0 when calculating percent_dev
#   6.0  09/17/10  PHH      Check if PercentDev not greather than 999
#==============================================================================================
# ERROR RULE, DO EVERY TIME AN ERROR OCCURS
#==============================================================================================
#
DEFINE USEMETRIC ENV;
DEFINE tonsfactor long;
DEFINE total_jr_quantity double;


NO * EXECUTE 
	select * from acs_recipe_dev;


* * BUILD
#get standard values

	IF ($USEMETRIC="Y") THEN
		let tonsfactor = 1000;
	ELSE
		let tonsfactor = 2000;
	END IF

	let blank_jumbo = "";
	IF ($sum_by_run = 1 or $sum_by_rmgrp = 1) THEN
		call build_summary();
	ELSE
		call build_detail();
	END IF

SUBROUTINE build_detail()



	foreach

		select acs_jumbo_recipe.raw_matl_grp_id jr_raw_matl_grp, 
			acs_jumbo_recipe.raw_matl_id jr_raw_matl_id,
			acs_jumbo_recipe.recipe_prod_id jr_recipe_prod_id, 
			acs_jumbo_recipe.quantity jr_quantity,
			acs_jumbo_recipe.jumbo_id jr_jumbo_id, 
			acs_unit_route.run_num aur_run_num, 
			acs_unit_route.wgt_net wgt_act,
#3
			acs_jumbo_recipe.machine_id jr_machine_id,
			acs_jumbo_recipe.machine_type jr_mach_type,
			acs_jumbo_recipe.mill_id jr_mill_id,
#3
			acs_jumbo_recipe.recipe_prod_id jr_recipe_prod_id,
			acs_jumbo_recipe.product_code_id jr_product_code
			from acs_jumbo_recipe, acs_unit_route
			where acs_jumbo_recipe.jumbo_id = acs_unit_route.unit_id
			and acs_unit_route.mill_id = acs_jumbo_recipe.prod_mill_id
			and acs_unit_route.machine_type = acs_jumbo_recipe.prod_mach_type
			and acs_unit_route.machine_id = acs_jumbo_recipe.prod_mach_id
			and acs_unit_route.mx_action_code = 'TURNUP'
			and acs_unit_route.type_code = 'J'
#2			and acs_jumbo_recipe.grade_spec_parent = $grade_spec
			and acs_jumbo_recipe.class = 'P'
			and acs_jumbo_recipe.grade_spec = $grade_spec
			and acs_jumbo_recipe.jumbo_id like $jumbo_id_sav
			and acs_unit_route.run_num like $run_num
			and acs_jumbo_recipe.recipe_prod_id like $recipe_prod_id
			and acs_jumbo_recipe.prod_mill_id = $mill_id
			and acs_jumbo_recipe.prod_mach_type = $machine_type
			and acs_jumbo_recipe.prod_mach_id = $machine_id;


		select product_code_id ac_product_code,
			sum(acs_direct_cost.quantity) act_quantity, 
			acs_direct_cost.unit_meas ac_unit_meas
			from acs_cost, acs_direct_cost
			where acs_cost.cost_id = acs_direct_cost.cost_id
			and raw_matl_grp_id = $jr_raw_matl_grp
			and raw_matl_id = $jr_raw_matl_id
			and acs_direct_cost.unit_id = $jr_jumbo_id
			and run_num = $aur_run_num
			and acs_cost.cons_mach_id = $jr_machine_id
			and acs_cost.cons_mach_type = $jr_mach_type
			and acs_cost.cons_mill_id = $jr_mill_id
			group by product_code_id, acs_direct_cost.unit_meas;

		let acs_cost_success = $success;
		let jumbo_id = $jr_jumbo_id;
		call ACSGetJumboDryWeight();
		let jr_quantity = ($jr_quantity * $dry_wgt_act) / $tonsfactor;

		echo for $jr_raw_matl_id : $jr_quantity acs_cost_success:$acs_cost_success ;

		IF ($acs_cost_success = 1) THEN
			let deviation_qty = $jr_quantity - $act_quantity;
			IF ($deviation_qty < 0) THEN
				let deviation_qty = $deviation_qty * -1;
			END IF
			IF ($jr_quantity <> 0) THEN
				let percent_dev = ($deviation_qty / $jr_quantity) * 100;
			ELSE
				let percent_dev = 0;
			END IF
		ELSE
			let deviation_qty = 0;
			let percent_dev = 0;
		END IF
# rev 6.0
		if ( $percent_dev > 999 ) then 
			let percent_dev = 999;
		end if 

		select user_id x
			from acs_recipe_dev
			where user_id = $user_id
			and raw_matl_grp_id = $jr_raw_matl_grp
			and raw_matl_id = $jr_raw_matl_id
			and product_code_std = $jr_product_code
			and product_code_act = $ac_product_code
			and jumbo_id = $jr_jumbo_id
			and recipe_prod_id = $jr_recipe_prod_id;

		
		IF ($success = 0) THEN


			echo 1 insert into acs_recipe_dev
				(user_id, raw_matl_grp_id, raw_matl_id, product_code_std, product_code_act,
				unit_meas, std_cons_qty, act_cons_qty, percent_dev, mill_id, machine_type,
				machine_id, jumbo_id, run_num, recipe_prod_id, deviation_qty)
			values ($user_id, $jr_raw_matl_grp, $jr_raw_matl_id, $jr_product_code, $ac_product_code,
				$ac_unit_meas, $jr_quantity, $act_quantity, $percent_dev, $mill_id, $machine_type,
				$machine_id, $jr_jumbo_id, $aur_run_num, $jr_recipe_prod_id,$deviation_qty);

			insert into acs_recipe_dev
				(user_id, raw_matl_grp_id, raw_matl_id, product_code_std, product_code_act,
				unit_meas, std_cons_qty, act_cons_qty, percent_dev, mill_id, machine_type,
				machine_id, jumbo_id, run_num, recipe_prod_id, deviation_qty)
			values ($user_id, $jr_raw_matl_grp, $jr_raw_matl_id, $jr_product_code, $ac_product_code,
				$ac_unit_meas, $jr_quantity, $act_quantity, $percent_dev, $mill_id, $machine_type,
				$machine_id, $jr_jumbo_id, $aur_run_num, $jr_recipe_prod_id,$deviation_qty);

		END IF

	end foreach
END SUBROUTINE

SUBROUTINE build_summary()

	let old_raw_matl_grp = "";
	let old_raw_matl_id = "";
	let old_product_code = "";
	let old_recipe_prod_id = "";
	let first_time = 1;
	let total_jr_quantity = 0;
	let total_act_quantity = 0;
	foreach

		select acs_jumbo_recipe.jumbo_id jr_jumbo_id,
			acs_jumbo_recipe.quantity jr_quantity,
			acs_unit_route.wgt_net wgt_act,
			acs_jumbo_recipe.raw_matl_grp_id jr_raw_matl_grp, 
			acs_jumbo_recipe.raw_matl_id jr_raw_matl_id,
			acs_jumbo_recipe.recipe_prod_id jr_recipe_prod_id, 
			acs_unit_route.run_num aur_run_num, 
#3
			acs_jumbo_recipe.machine_id jr_machine_id,
			acs_jumbo_recipe.machine_type jr_mach_type,
			acs_jumbo_recipe.mill_id jr_mill_id,
			acs_jumbo_recipe.product_code_id jr_product_code
			from acs_jumbo_recipe, acs_unit_route
			where acs_jumbo_recipe.jumbo_id = acs_unit_route.unit_id
			and acs_unit_route.mill_id = acs_jumbo_recipe.prod_mill_id
			and acs_unit_route.machine_type = acs_jumbo_recipe.prod_mach_type
			and acs_unit_route.machine_id = acs_jumbo_recipe.prod_mach_id
			and acs_unit_route.mx_action_code = 'TURNUP'
			and acs_unit_route.type_code = 'J'
#2			and acs_jumbo_recipe.grade_spec_parent = $grade_spec
			and acs_jumbo_recipe.grade_spec = $grade_spec
			and acs_jumbo_recipe.class = 'P'
			and acs_unit_route.run_num like $run_num
			and acs_jumbo_recipe.recipe_prod_id like $recipe_prod_id
			and acs_jumbo_recipe.prod_mill_id = $mill_id
			and acs_jumbo_recipe.prod_mach_type = $machine_type
			and acs_jumbo_recipe.prod_mach_id = $machine_id
			order by acs_jumbo_recipe.raw_matl_grp_id,
			acs_jumbo_recipe.raw_matl_id,
			acs_jumbo_recipe.recipe_prod_id,
			acs_jumbo_recipe.product_code_id;

		IF ($first_time = 1) THEN
			let old_raw_matl_grp = $jr_raw_matl_grp;
			let old_raw_matl_id = $jr_raw_matl_id;
			let old_product_code = $jr_product_code;
			let old_recipe_prod_id = $jr_recipe_prod_id;
			let first_time = 0;
		END IF

		IF ($sum_by_run = 1) THEN
			IF ($old_raw_matl_grp <> $jr_raw_matl_grp or $old_raw_matl_id <> $jr_raw_matl_id 
				or $old_product_code <> $jr_product_code or $old_recipe_prod_id <> $jr_recipe_prod_id) THEN
					call write_summary();
					let old_raw_matl_grp = $jr_raw_matl_grp;
					let old_raw_matl_id = $jr_raw_matl_id;
					let old_product_code = $jr_product_code;
					let old_recipe_prod_id = $jr_recipe_prod_id;
					let total_jr_quantity = 0;
					let total_act_quantity = 0;
			END IF
		ELSE
			IF ($old_raw_matl_grp <> $jr_raw_matl_grp) THEN
				call write_raw_matl_summary();
				let old_raw_matl_grp = $jr_raw_matl_grp;
				let total_jr_quantity = 0;
				let total_act_quantity = 0;
			END IF
		END IF
		select product_code_id ac_product_code,
			sum(acs_direct_cost.quantity) act_quantity, acs_direct_cost.unit_meas ac_unit_meas
			from acs_cost, acs_direct_cost
			where raw_matl_grp_id = $jr_raw_matl_grp
			and acs_cost.cost_id = acs_direct_cost.cost_id
			and raw_matl_id = $jr_raw_matl_id
			and run_num = $aur_run_num
			and acs_cost.cons_mach_id = $jr_machine_id
			and acs_cost.cons_mach_type = $jr_mach_type
			and acs_cost.cons_mill_id = $jr_mill_id
			and acs_direct_cost.unit_id = $jr_jumbo_id
			group by product_code_id, acs_direct_cost.unit_meas;

		let acs_cost_success = $success;
		let jumbo_id = $jr_jumbo_id;
		call ACSGetJumboDryWeight();

		let jr_quantity = ($jr_quantity * $dry_wgt_act) / $tonsfactor;
		let total_jr_quantity = $total_jr_quantity + $jr_quantity;
		let total_act_quantity = $total_act_quantity + $act_quantity;

	end foreach

	IF ($sum_by_run = 1) THEN
		call write_summary();
	ELSE
		call write_raw_matl_summary();
	END IF

END SUBROUTINE

SUBROUTINE write_summary()

		IF ($acs_cost_success = 1) THEN
			let deviation_qty = $total_jr_quantity - $total_act_quantity;
			IF ($deviation_qty < 0) THEN
				let deviation_qty = $deviation_qty * -1;
			END IF
			IF ($total_jr_quantity <> 0) THEN
				
				let percent_dev = ($deviation_qty / $total_jr_quantity) * 100; 
			ELSE
				let percent_dev = 0;
			END IF
		ELSE
			let deviation_qty = 0;
			let percent_dev = 0;
		END IF


# rev 6.0
		if ( $percent_dev > 999 ) then 
			let percent_dev = 999;
		end if 

		let blank_jumbo_id = "";

		select user_id x
			from acs_recipe_dev
			where user_id = $user_id
			and raw_matl_grp_id = $old_raw_matl_grp
			and raw_matl_id = $old_raw_matl_id
			and product_code_std = $old_product_code
			and product_code_act = $ac_product_code
			and jumbo_id = $blank_jumbo_id
			and recipe_prod_id = $old_recipe_prod_id;

		IF ($success = 0) THEN


		
			echo 2 insert into acs_recipe_dev
				(user_id, raw_matl_grp_id, raw_matl_id, product_code_std, product_code_act,
				unit_meas, std_cons_qty, act_cons_qty, percent_dev, mill_id, machine_type,
				machine_id, jumbo_id, run_num, recipe_prod_id, deviation_qty)
			values ($user_id, $old_raw_matl_grp, $old_raw_matl_id, $old_product_code, $ac_product_code,
				$ac_unit_meas, $total_jr_quantity, $total_act_quantity, $percent_dev, $mill_id, $machine_type,
				$machine_id, $blank_jumbo_id, $aur_run_num, $old_recipe_prod_id,$deviation_qty);

			insert into acs_recipe_dev
				(user_id, raw_matl_grp_id, raw_matl_id, product_code_std, product_code_act,
				unit_meas, std_cons_qty, act_cons_qty, percent_dev, mill_id, machine_type,
				machine_id, jumbo_id, run_num, recipe_prod_id, deviation_qty)
			values ($user_id, $old_raw_matl_grp, $old_raw_matl_id, $old_product_code, $ac_product_code,
				$ac_unit_meas, $total_jr_quantity, $total_act_quantity, $percent_dev, $mill_id, $machine_type,
				$machine_id, $blank_jumbo_id, $aur_run_num, $old_recipe_prod_id,$deviation_qty);

		END IF

END SUBROUTINE

SUBROUTINE write_raw_matl_summary()

		IF ($acs_cost_success = 1) THEN
			let deviation_qty = $total_jr_quantity - $total_act_quantity;
			IF ($deviation_qty < 0) THEN
				let deviation_qty = $deviation_qty * -1;
			END IF
			IF ($total_jr_quantity <> 0) THEN
				let percent_dev = ($deviation_qty / $total_jr_quantity) * 100;
			ELSE
				let percent_dev = 0;
			END IF
		ELSE
			let deviation_qty = 0;
			let percent_dev = 0;
		END IF
# rev 6.0
		if ( $percent_dev > 999 ) then 
			let percent_dev = 999;
		end if 


		let blank_jumbo_id = "";
		let blank_raw_matl_id = "";
		let blank_product_code = "";
		let blank_recipe_prod_id = "";

		select user_id x
			from acs_recipe_dev
			where user_id = $user_id
			and raw_matl_grp_id = $old_raw_matl_grp
			and raw_matl_id = $blank_raw_matl_id
			and product_code_std = $blank_product_code
			and product_code_act = $blank_product_code
			and jumbo_id = $blank_jumbo_id
			and recipe_prod_id = $blank_recipe_prod_id;

		IF ($success = 0) THEN


			echo 3 insert into acs_recipe_dev
				(user_id, raw_matl_grp_id, raw_matl_id, product_code_std, product_code_act,
				unit_meas, std_cons_qty, act_cons_qty, percent_dev, mill_id, machine_type,
				machine_id, jumbo_id, run_num, recipe_prod_id, deviation_qty)
			values ($user_id, $old_raw_matl_grp, $blank_raw_matl_id, $blank_product_code, $blank_product_code,
				$ac_unit_meas, $total_jr_quantity, $total_act_quantity, $percent_dev, $mill_id, $machine_type,
				$machine_id, $blank_jumbo_id, $aur_run_num, $blank_recipe_prod_id,$deviation_qty);
			insert into acs_recipe_dev
				(user_id, raw_matl_grp_id, raw_matl_id, product_code_std, product_code_act,
				unit_meas, std_cons_qty, act_cons_qty, percent_dev, mill_id, machine_type,
				machine_id, jumbo_id, run_num, recipe_prod_id, deviation_qty)
			values ($user_id, $old_raw_matl_grp, $blank_raw_matl_id, $blank_product_code, $blank_product_code,
				$ac_unit_meas, $total_jr_quantity, $total_act_quantity, $percent_dev, $mill_id, $machine_type,
				$machine_id, $blank_jumbo_id, $aur_run_num, $blank_recipe_prod_id,$deviation_qty);

		END IF

END SUBROUTINE
	INCLUDE "acs_subroutines";
