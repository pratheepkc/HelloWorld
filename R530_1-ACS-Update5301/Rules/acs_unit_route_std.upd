#
#============================================================================
# MxUpdate rules for ACS unit route
#============================================================================
#
#============================================================================
# COMMON RULE, DO EVERY TIME
#============================================================================
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#  1.0   04/14/09   PKC      initial release
#----------------------------------------------------------------------------
SUBROUTINE ACSInsertStdRouteJumbo()

	LET ts_create = {time};
	LET ts_modified = $ts_create;
	LET type_code="J";
	LET parent_id = $jumbo_id;
	
# Get parent route
	LET route_step_num=1;
	if ($jumbo_id_parent1 <> " ") then
		foreach 
		    select mill_id route_mill, machine_type route_mt, machine_id route_mid, 
				order_id parent_order_id,item_num parent_item_num, type_code tc_parent
			from acs_unit_route_std
		     where unit_id = $jumbo_id_parent1;

		    echo Inserting Parent Jumbo Route $jumbo_id_parent1 for Jumbo $unit_id;
		    insert into acs_unit_route_std
		    (unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    values ($unit_id, $route_mill, $route_mt, $route_mid, $parent_route, $parent_order_id, $parent_item_num, $jumbo_id_parent1, $tc_parent, $route_step_num, 'N', $ts_modified, $ts_create);
		    
		    LET route_step_num = $route_step_num + 1;
		end foreach
	end if
		    echo Inserting Jumbo Route $jumbo_id;
		    insert into acs_unit_route_std
		    (unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    values ($jumbo_id, $mill_id, $machine_type, $machine_id, $prod_route_id, $order_id, $item_num, $parent_id, $type_code, $route_step_num, 'Y', $ts_modified, $ts_create);

END SUBROUTINE


SUBROUTINE ACSInsertStdRouteUnit()

	LET ts_create = {time};
	LET ts_modified = $ts_create;
#	LET type_code="R";
	LET parent_id = $unit_id;
	
	select prod_route_id, class, stat, use_roll_bank_flag, type_code tc_order
		 from order_item
	 where order_id = $order_id
	   and item_num = $item_num;

	select flow_seq curr_flow_seq
	  from machine_type
	 where machine_type = $machine_type;

	if ($prod_route_id <> "000" and $prod_route_id <> " ") then

# If this is the last finished goods step, then include all the steps. If an intermediate non-FG step, then only include upto the current step

	   select prod_route_step.machine_type prs_mach_type, flow_seq
	     from prod_route_step, machine_type
	    where prod_route_step.machine_type = machine_type.machine_type
		and prod_route_id = $prod_route_id
		and flow_seq > $curr_flow_seq
		and prod_route_step.machine_type not in ('WH','WR','PS');

	   LET inprocess_unit = $success;

	   if ($inprocess_unit = FALSE) then
# Get all the routes
		foreach 
		    select route_step_num, mill_id route_mill, prod_route_step.machine_type route_mt, machine_id route_mid, flow_seq
			from prod_route_step, machine_type
		     where prod_route_id = $prod_route_id
			and prod_route_step.machine_type = machine_type.machine_type;

# the direct flag indicates which steps have direct costs vs those that are genealogy costs. The current step + downstream will be assumed to have direct costs.

		    if ($flow_seq > $curr_flow_seq or $flow_seq = $curr_flow_seq) then
			LET direct_flag = "Y";
		    else
			LET direct_flag = "N";
		    end if

		    insert into acs_unit_route_std
		    (unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    values ($unit_id, $route_mill, $route_mt, $route_mid, $prod_route_id, $order_id, $item_num, $parent_id, $type_code, $route_step_num, $direct_flag, $ts_modified, $ts_create);

		    		echo FG: Inserting All Routes: insert into acs_unit_route_std
		    		(unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    		values ($unit_id, $route_mill, $route_mt, $route_mid, $parent_route, $parent_order_id, $parent_item_num, $unit_id_parent1, $type_code, $route_step_num, $direct_flag, $ts_modified, $ts_create);
		end foreach
# Get only upto the current step
	else
	   foreach
		    select route_step_num, mill_id route_mill, machine_type.machine_type route_mt, machine_id route_mid, flow_seq
			from prod_route_step, machine_type
		     where prod_route_id = $prod_route_id
			 and prod_route_step.machine_type = machine_type.machine_type
			 and flow_seq <= $curr_flow_seq;

		    if ($flow_seq = $curr_flow_seq) then
			LET direct_flag = "Y";
		    else
			LET direct_flag = "N";
		    end if


		    insert into acs_unit_route_std
		    (unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    values ($unit_id, $route_mill, $route_mt, $route_mid, $prod_route_id, $order_id, $item_num, $parent_id, $type_code, $route_step_num, $direct_flag, $ts_modified, $ts_create);

		    		echo Inprocess: Inserting Upto Current Step: insert into acs_unit_route_std
		    		(unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    		values ($unit_id, $route_mill, $route_mt, $route_mid, $parent_route, $parent_order_id, $parent_item_num, $unit_id_parent1, $type_code, $route_step_num, $direct_flag, $ts_modified, $ts_create);
		end foreach
	end if

# Get parent route for rollbank units

		if ($use_roll_bank_flag = "Y") then
# decrease ts_create by 60 seconds to enable sorting
			LET ts_create = $ts_create - 60;
			LET ts_modified = ts_create;
			foreach 
		    		select prod_route_id parent_route, route_step_num, mill_id route_mill, machine_type route_mt, machine_id route_mid, 
					order_id parent_order_id,item_num parent_item_num, type_code tc_parent
				from acs_unit_route_std
		     		where unit_id = $unit_id_parent1;

		    		insert into acs_unit_route_std
		    		(unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    		values ($unit_id, $route_mill, $route_mt, $route_mid, $parent_route, $parent_order_id, $parent_item_num, $unit_id_parent1, $type_code, $route_step_num, 'N', $ts_modified, $ts_create);

		    		echo Inserting Parent Route: insert into acs_unit_route_std
		    		(unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    		values ($unit_id, $route_mill, $route_mt, $route_mid, $parent_route, $parent_order_id, $parent_item_num, $unit_id_parent1, $type_code, $route_step_num, 'N', $ts_modified, $ts_create);

			end foreach
		end if
	end if

# Handle standard size order - the std route will be defined in the master file acs_std_size_route

	if ($prod_route_id = "000" or $prod_route_id = " ") then
		select class 
		  from order_mast
		 where order_id = $order_id;

		if ($class = "T") then

			select prod_route_id
			 from acs_std_size_route
			where mill_id = $mill_id
			  and machine_type = $machine_type
			  and machine_id = $machine_id
			  and active_flag = "Y";

			If ($success = TRUE) then

			foreach 
		    		select route_step_num, mill_id route_mill, machine_type route_mt, machine_id route_mid
				from prod_route_step
		     		where prod_route_id = $prod_route_id;

		    		insert into acs_unit_route_std
		    		(unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, 
						parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    		values ($unit_id, $route_mill, $route_mt, $route_mid, $prod_route_id, $order_id, $item_num, 
						$parent_id, $type_code, $route_step_num, 'Y', $ts_modified, $ts_create);

		    		echo Inserting Std Size Route: insert into acs_unit_route_std
		    		(unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    		values ($unit_id, $route_mill, $route_mt, $route_mid, $parent_route, $parent_order_id, $parent_item_num, $unit_id_parent1, $type_code, $route_step_num, 'Y', $ts_modified, $ts_create);


			end foreach
			end if
		else
# default behaviour for all units that do not have a route is to assume a single route with MMM that's on the unit...For eg: Purchased Inventory
		    	insert into acs_unit_route_std
		    	(unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, 
			parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    	values ($unit_id, $mill_id, $machine_type, $machine_id, '000', $order_id, $item_num, 
			$parent_id, $type_code, 0, 'Y', $ts_modified, $ts_create);

		    	echo Inserting Default Route: insert into acs_unit_route_std
		    	(unit_id, mill_id, machine_type, machine_id, prod_route_id,order_id, item_num, 
			parent_id, type_code, route_step_num, direct_flag, ts_modified, ts_create)
		    	values ($unit_id, $mill_id, $machine_type, $machine_id, '000', $order_id, $item_num, 
			$parent_id, $type_code, 0, 'N', $ts_modified, $ts_create);

		end if
	end if
			

END SUBROUTINE

SUBROUTINE ACSDeleteStdRouteUnit()

	delete from acs_unit_route_std
	  where unit_id = $unit_id;

END SUBROUTINE

SUBROUTINE ACSDeleteStdRouteJumbo()

	delete from acs_unit_route_std
	  where unit_id = $jumbo_id;

END SUBROUTINE
