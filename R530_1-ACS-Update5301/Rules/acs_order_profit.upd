DEFINE curr_time long;
DEFINE start_prod_day long;
DEFINE end_prod_day long;
DEFINE MXLANG ENV;
DEFINE order_key STRING;
DEFINE good_tons LONG;
DEFINE total_prodtime LONG;
DEFINE invoiced_hrs DOUBLE;
DEFINE capacity_per_hr DOUBLE;
DEFINE order_runtime DOUBLE;
DEFINE tons_per_hr DOUBLE;
DEFINE tons_factor DOUBLE;
DEFINE total_units long;
DEFINE closed_perc double;
DEFINE open_perc double;
DEFINE act_cost_invoiced double;
define std_cost_invoiced double;
#  MxUpdate Rules for build_acs_summary.
#
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#   1.0  05/27/09   PKC	     Build order profit table acs_sum_ord_profit
#   2.0  06/01/09   PKC	     Recalc based on invoice generation
#   3.0  06/04/09   PKC	     Do not calc values if order not invoiced
#   4.0  07/21/09   NJN	     Use decimal instead of 0 to calculate perc_profit
#   5.0  12/03/09   GVG      Added stat of "P" to invoices
#   6.0  01/27/10   GVG      Factor credit debit memos into invoice price and weight calculations
#   7.0  01/27/10   GVG      Factor miscellaneous adjustments into invoice price and get allowances using table invoice_line
#   8.0  01/28/10   GVG      Pro-rate price/cost amounts by number of units that are closed or open
#   9.0  01/29/10   GVG      Sum up std_cost_invoiced, act_cost_invoiced, and variable_cost_invoiced
#==============================================================================================
# ERROR RULE, DO EVERY TIME AN ERROR OCCURS
#==============================================================================================
NO * EXECUTE
	select * from acs_sum_ord_profit;
	select * from order_item;
	select * from order_mast;
	select * from acs_sum_ord_cost;

MX * ER 
	echo "Rule error";
#
#============================================================================
# Start up rules.  Any variable which needs to be initialized ONLY once will
#	be done here.
#============================================================================

* * * AUTO acs_sum_ord_profit

	insert into acs_sum_ord_profit
	(order_id, item_num, closure_flag, mill_id, machine_type, machine_id, prod_route_id, year_num, acct_period,
	 ts_ord, ts_del_prom, grade_spec, type_code, article_id, revision_num, market_seg_id, sub_market_id,
	 customer_id, diam_ord, width_ord, diam_core, wgt_ord, price, price_invoiced, amt_inv_allowance,
	 wgt_invoiced, std_cost, act_cost, amt_contribution, perc_contribution, contribution_hr, amt_profit,
	 perc_profit, tons_hour_net, seconds_run, ts_modified)
	values 
	($order_id, $item_num, $closure_flag, $mill_id, $machine_type, $machine_id, $prod_route_id, $year_num, $acct_period,
	 $ts_ord, $ts_del_prom, $grade_spec, $type_code, $article_id, $revision_num, $market_seg_id, $sub_market_id,
	 $customer_id, $diam_ord, $width_ord, $diam_core, $wgt_ord, $price, $price_invoiced, $amt_inv_allowance,
	 $wgt_invoiced, $std_cost, $act_cost, $amt_contribution, $perc_contribution, $contribution_hr, $amt_profit,
	 $perc_profit, $tons_hour_net, $seconds_run, $ts_modified);


MX * ST 

	let curr_time = {time};
        select format oiformat from dict_columns where language_id = $MXLANG and
           column_code = 'OrderID';

	select decimal_value tons_factor
	  from constants
	 where key_value = 'TONS_FACTOR';


# Accumulate Costs after production has started

	select max(ts_modified) max_ord
	  from acs_sum_ord_profit;

	echo max_ord $max_ord;
	foreach
		select distinct order_id, item_num
		  from invoice_view
		 where ts_create > $max_ord and order_id<> ' '
#5 start
		and stat = 'P';
#5 end

		select mill_id, machine_type, machine_id, prod_route_id, year_num, acct_period, ts_del_prom,
			 grade_spec, type_code, article_id, revision_num, market_seg_id, sub_market_id, 
			 diam_ord, width_ord, diam_core, wgt_ord ordered_wgt, price ord_price
		  from order_item
		 where order_id = $order_id and item_num = $item_num;

		select customer_id, ts_ord
		  from order_mast 
		 where order_id = $order_id;

# Calculate Profit

		LET closure_flag = "Y";
		echo calc profit for $order_id $item_num $closure_flag;
		Call CALC_ACTUAL_PROFIT();
		LET closure_flag = "N";
		echo calc profit for $order_id $item_num $closure_flag;
		Call CALC_ACTUAL_PROFIT();

	end foreach
		   
SUBROUTINE CALC_ACTUAL_PROFIT()

# Get total costs

		select sum(std_cost) std_cost, sum(act_cost) act_cost
		  from acs_sum_unit
		 where order_id = $order_id
		   and item_num = $item_num
		   and closure_flag = $closure_flag;

		select count(*) closed_units
			from acs_cost_closure, invent
			where acs_cost_closure.unit_id = invent.unit_id
			and closure_flag = 'Y'
			and order_id = $order_id
			and item_num = $item_num
			and invent.class = 'S';

		select count(*) open_units
			from acs_cost_closure, invent
			where acs_cost_closure.unit_id = invent.unit_id
			and closure_flag = 'N'
			and order_id = $order_id
			and item_num = $item_num
			and invent.class = 'S';

		let total_units = $closed_units + $open_units;
		let open_perc = $open_units / $total_units;
		let closed_perc = $closed_units / $total_units;

		IF ($closure_flag = "Y") THEN
			let price = $ord_price * $closed_perc;
			let wgt_ord = $ordered_wgt * $closed_perc;
		ELSE
			let price = $ord_price * $open_perc;
			let wgt_ord = $ordered_wgt * $open_perc;
		END IF

# Get Invoice data 

		LET price_invoiced = 0;
		LET wgt_invoiced = 0;
		LET amt_inv_allowance = 0;
		LET std_cost_invoiced = 0;
		LET act_cost_invoiced = 0;
		LET variable_cost_invoiced = 0;
		LET amt_contribution = 0;
		LET perc_contribution = 0;
		LET contribution_hr = 0;
		LET amt_profit = 0;
		LET perc_profit = 0;
		LET tons_hour_net= 0;
		LET seconds_run = 0;
		let price_crdr = 0;
		let weight_crdr = 0;


		foreach 

#7		select invoice_id, invoice_line_num, load_id, price inv_price , weight 
		select invoice_id, invoice_line_num, load_id, price inv_price , weight inv_weight, class inv_class 
		  from invoice_line
		 where order_id= $order_id and item_num=$item_num;
#7
		IF ($inv_class = "C") THEN
			let inv_price = $inv_price * -1;
			let weight = $weight * -1;
		END IF
#7
		IF ($closure_flag = "Y") THEN
			let line_price = $inv_price * $closed_perc;
			let weight = $inv_weight * $closed_perc;
		ELSE
			let line_price = $inv_price * $open_perc;
			let weight = $inv_weight * $open_perc;
		END IF

		LET price_invoiced = $price_invoiced + $line_price;
		LET wgt_invoiced = $wgt_invoiced + $weight;

#7      	let order_key = $load_id,"-",$order_id:$oiformat, "-", $item_num:"&&";
      	let order_key = $invoice_id,"-",$invoice_line_num:"&&&";

		select sum(amt_allowance) amt_allowance
		  from allowance_item 
#7		 where table_name='inv_order_item'
		 where table_name='invoice_line'
		   and key_value = $order_key;

		IF ($closure_flag = "Y") THEN
			let amt_allowance = $amt_allowance * $closed_perc;
		ELSE
			let amt_allowance = $amt_allowance * $open_perc;
		END IF

		LET amt_inv_allowance = $amt_inv_allowance + $amt_allowance;

# Get Total Costs for invoiced units

		select sum(act_cost) act_cost_inv, sum(std_cost) std_cost_inv
		  from acs_sum_unit, invent
		 where acs_sum_unit.order_id = $order_id
		   and acs_sum_unit.item_num = $item_num
		   and closure_flag = $closure_flag
		   and invent.load_id = $load_id
		   and invent.class = 'S'
		   and invent.unit_id = acs_sum_unit.unit_id;

# Get variable costs for invoiced units (for contribution margin)

		select sum(act_cost) variable_cost_inv
		  from acs_sum_unit, acs_cost_type, invent
		 where acs_sum_unit.order_id = $order_id
		   and acs_sum_unit.item_num = $item_num
		   and closure_flag = $closure_flag
		   and acs_sum_unit.cost_group_id =acs_cost_type.cost_group_id
		   and acs_sum_unit.cost_type_id = acs_cost_type.cost_type_id
		   and acs_cost_type.type_code='V'
		   and invent.load_id = $load_id
		   and invent.class = 'S'
		   and invent.unit_id = acs_sum_unit.unit_id;


		let act_cost_invoiced = $act_cost_invoiced + $act_cost_inv;
		let std_cost_invoiced = $std_cost_invoiced + $std_cost_inv;
		let variable_cost_invoiced = $variable_cost_invoiced + $variable_cost_inv;

		end foreach
#6 start
		foreach

			select price crdr_price, weight crdr_weight, class crdr_class, load_id crdr_load
				from crdr_line, crdr_mast 
				where crdr_line.crdr_memo_id = crdr_mast.crdr_memo_id
				and order_id = $order_id and item_num = $item_num;

			IF ($crdr_class = "C") THEN
				let crdr_price = $crdr_price * -1;
				let crdr_weight = $crdr_weight * -1;
			END IF

			IF ($closure_flag = "Y") THEN
				let crdr_price = $crdr_price * $closed_perc;
				let crdr_weight = $crdr_weight * $closed_perc;
			ELSE
				let crdr_price = $crdr_price * $open_perc;
				let crdr_weight = $crdr_weight * $open_perc;
			END IF

			let price_invoiced = $crdr_price + $price_invoiced;
			let weight_crdr = $weight_crdr + $crdr_weight;

		end foreach
#6 end
		LET amt_profit = $price_invoiced - $amt_inv_allowance - $act_cost_invoiced;
#6 factor weight crdr into invoiced weight
		echo LET amt_profit = $price_invoiced - $amt_inv_allowance - $act_cost_invoiced;
		let wgt_invoiced = $wgt_invoiced + $weight_crdr;
		if ($act_cost_invoiced > 0.0000000000) then
			LET perc_profit = ($amt_profit/$act_cost_invoiced) * 100;
		else
			LET perc_profit = 0;
		end if
		if ($price_invoiced>0) then
			LET amt_contribution = $price_invoiced - $variable_cost_invoiced;
		else
		    	LET amt_contribution = 0;
		end if

		Call CalcContributionMarginHr();

		Call UpdateProfit();


END SUBROUTINE


SUBROUTINE CalcContributionMarginHr()

# Calculate PM Run Time for Run
	LET good_tons = 0;
	LET total_prodtime = 0;
	LET tons_per_hr = 0;
	LET order_runtime = 0;
	LET seconds_run = 0;

	foreach 
		select distinct run_num
		  from run_ords
		 where order_id = $order_id
		   and item_num = $item_num
		   and machine_type='WD';

# Get total wgt of good jumbos
		select sum(wgt_net) wgt_turnup 
		  from acs_unit_route, jumbo
		 where acs_unit_route.run_num = $run_num
		   and acs_unit_route.machine_type = 'PM'
		   and acs_unit_route.unit_id = jumbo.jumbo_id
		   and acs_unit_route.mx_action_code='TURNUP'
		   and stat = 'G';

		LET good_tons = $good_tons + ($wgt_turnup/$tons_factor);

# Total Runtime for jumbos of all statuses.

		select sum(seconds_on_machine) run_time
		  from acs_unit_route
		 where run_num = $run_num
		   and machine_type = 'PM'
		   and acs_unit_route.mx_action_code='TURNUP';

# Total downtime for run 
		select sum(seconds_total) downtime
		  from downtime
		 where run_num = $run_num
		   and machine_type = 'PM';

# Total Actual Runtime
		LET total_prodtime = $total_prodtime + ($run_time + $downtime);
	end foreach

# Actual Capacity per Hr
		if ($total_prodtime > 0 and $good_tons > 0 and $wgt_invoiced > 0) then
		    LET tons_per_hr= $good_tons/($total_prodtime/3600);

# Run time for invoiced quantity
		    LET order_runtime = ($wgt_invoiced/$tons_factor)/$tons_per_hr;
		    LET seconds_run = $order_runtime * 3600;

# Contrib Margin per hour
		    LET contribution_hr = $amt_contribution/$order_runtime;
		    echo contribution_hr = $amt_contribution/$order_runtime;
		else
		    LET contribution_hr = 0;
		end if
	echo contribution $order_id $item_num $run_num $wgt_invoiced $total_prodtime $good_tons $tons_per_hr $contribution_hr;

END SUBROUTINE

SUBROUTINE UpdateProfit()

	update acs_sum_ord_profit
	   set mill_id = $mill_id,
		 machine_type = $machine_type,
		 machine_id = $machine_id,
		 prod_route_id = $prod_route_id,
		 year_num = $year_num,
		 acct_period = $acct_period,
		 ts_ord = $ts_ord,
		 ts_del_prom = $ts_del_prom,
		 grade_spec = $grade_spec,
		 type_code = $type_code,
		 article_id = $article_id,
		 revision_num = $revision_num,
		 market_seg_id = $market_seg_id,
		 sub_market_id = $sub_market_id,
		 customer_id = $customer_id,
		 diam_ord = $diam_ord,
		 width_ord = $width_ord,
		 diam_core = $diam_core,
		 wgt_ord = $wgt_ord,
		 price = $price,
		 price_invoiced = $price_invoiced,
		 amt_inv_allowance = $amt_inv_allowance,
		 wgt_invoiced = $wgt_invoiced,
		 std_cost = $std_cost_invoiced,
		 act_cost = $act_cost_invoiced,
		 amt_contribution = $amt_contribution,
		 perc_contribution = $perc_contribution,
		 contribution_hr = $contribution_hr,
		 amt_profit = $amt_profit,
		 perc_profit = $perc_profit,
		 tons_hour_net= $tons_per_hr,
		 seconds_run = $seconds_run,
		 ts_modified = $curr_time
	 where order_id = $order_id
	   and item_num = $item_num
	   and closure_flag = $closure_flag;
		

END SUBROUTINE



