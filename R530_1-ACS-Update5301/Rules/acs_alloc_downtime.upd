DEFINE curr_time long;
DEFINE i long;
DEFINE dt_class1 string;
DEFINE dt_class2 string;
DEFINE dt_class3 string;
DEFINE rec_cnt long;
DEFINE total_down long;
#  MxUpdate Rules for acs_alloc_downtime
#
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#   1.0  01/18/10   GVG	     Initial release
#   2.0  10/13/10   BRN	     Allocate the downtime when the run is complete
#==============================================================================================
# ERROR RULE, DO EVERY TIME AN ERROR OCCURS
#==============================================================================================
NO * EXECUTE
	select * from acs_unit_route;

MX * ER 
	echo "Rule error";
#
#============================================================================
# Start up rules.  Any variable which needs to be initialized ONLY once will
#	be done here.
#============================================================================
#
MX * ST

	let type = "ONCE";
	let curr_time = {time};

	foreach
		select machine_id, machine_type, mill_id, type_code, ts_end, ts_begin,
			run_num acs_dtrun, mx_timestamp, mx_action_code, seconds_total
			from acs_downtime
			where processed_flag = 'N';

		call check_run();
		
	end foreach

SUBROUTINE check_run()
		IF ($acs_dtrun = 0) THEN
			call get_prev_run();
		ELSE
			let last_run = $acs_dtrun;
		END IF

		select sum(seconds_on_machine) total_time, count(*) num_recs
			from acs_unit_route
			where machine_id = $machine_id
			and mill_id = $mill_id
			and machine_type = $machine_type
			and run_num = $last_run
			and seconds_on_machine > 0
			and mx_action_code = 'TURNUP';

		select mill_id_plan, mach_type_plan, mach_id_plan
			from acs_unit_route
			where machine_id = $machine_id
			and mill_id = $mill_id
			and machine_type = $machine_type
			and run_num = $last_run
			and mx_action_code = 'TURNUP';

		select machine_type x
			from run_mast
			where run_num = $last_run
			and machine_type = $mach_type_plan
			and machine_id = $mach_id_plan
			and mill_id = $mill_id_plan
# rev 2.0			and ts_consumed > 0;
			and stat = 'K';

		IF ($success = 1) THEN
			call allocate_downtimes();
		END IF
END SUBROUTINE


SUBROUTINE allocate_downtimes()

		let rec_cnt = 0;
		let total_down = 0;

		foreach

			select unit_id, seconds_on_machine, ts_transaction, seconds_down sel_downtime
				from acs_unit_route
				where machine_id = $machine_id
				and mill_id = $mill_id
				and machine_type = $machine_type
				and run_num = $last_run
				and seconds_on_machine > 0
				and mx_action_code = 'TURNUP';

			let rec_cnt = $rec_cnt + 1;
			IF ($rec_cnt < $num_recs) THEN
				let seconds_down = ($seconds_on_machine / $total_time) * $seconds_total;
				let total_down = $total_down + $seconds_down;
			ELSE
				let seconds_down = $seconds_total - $total_down;
			END IF

			IF ($mx_action_code = "DELETE") THEN
				let seconds_down = $seconds_down * -1;
				let check_for_zero = $sel_downtime + $seconds_down;
				IF ($check_for_zero < 0) THEN
					let seconds_down = $sel_downtime;
				END IF
			END IF
			update acs_unit_route
				set seconds_down = seconds_down + $seconds_down,
				ts_modified = $curr_time
				where machine_id = $machine_id
				and mill_id = $mill_id
				and machine_type = $machine_type
				and mx_action_code = 'TURNUP'
				and unit_id = $unit_id
				and run_num = $last_run
				and ts_transaction = $ts_transaction;

		end foreach

		update acs_downtime
			set processed_flag = 'Y',
			ts_processed = $curr_time
			where machine_type = $machine_type
			and machine_id = $machine_id
			and mill_id = $mill_id
			and type_code = $type_code
			and ts_end = $ts_end
			and run_num = $acs_dtrun
			and mx_timestamp = $mx_timestamp
			and mx_action_code = $mx_action_code;

END SUBROUTINE

SUBROUTINE get_prev_run()

	select run_num last_run, ts_transaction
		from acs_unit_route
		where machine_id = $machine_id
		and mill_id = $mill_id
		and machine_type = $machine_type
		and mx_action_code = 'TURNUP'
		and ts_transaction < $ts_begin
		order by ts_transaction desc;

END SUBROUTINE