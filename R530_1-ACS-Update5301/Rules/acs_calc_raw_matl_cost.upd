DEFINE USEMETRIC ENV;
DEFINE curr_time long;
DEFINE sum_cost double;
DEFINE sum_active_wgt double;
DEFINE  TonsFactor 	long;
DEFINE  LengthToWidthFactor long;
DEFINE AVG_COST_USED ENV ;
DEFINE new_cost DOUBLE;
#  MxUpdate Rules for calculating the raw material unit cost
#
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#   1.0  08/11/09   BRN      Initial release 
#   2.0  10/08/09   BRN      Change define from long to double
#   3.0  23-Mar-10  BRN      Implement the AvgCostPerTon
#   4.0  10-Dec-10  BRN      Adjust calculations
#==============================================================================================
# ERROR RULE, DO EVERY TIME AN ERROR OCCURS
#==============================================================================================
NO * EXECUTE
	select * from raw_matl;
	select * from raw_matl_mill;
	select * from recipe;
	select * acs_product_code;
	select * acs_product_mill;
	select * acs_product_mill_a;

MX * ER 
	echo "Rule error";
#
#============================================================================
# Start up rules.  Any variable which needs to be initialized ONLY once will
#	be done here.
#============================================================================

MX * ST 

# Set the metric and imperial factor
	if  ($USEMETRIC = "Y") then
		let LengthToWidthFactor = 100;
		let TonsFactor = 1000;
	else
		let LengthToWidthFactor = 12;
		let TonsFactor = 2000;
	end if

	let type = "ONCE";
	let curr_time = {time};

# Do the calculations for each mill
	foreach select mill_id
			from mill
			where active_flag = 'Y';

		echo ------------ $mill_id ------------------;

#------------ Get first the purchase raw materials required to be calculated
		foreach select rmm.raw_matl_grp_id, rmm.raw_matl_id
				from raw_matl_mill rmm, raw_matl rm
				where rmm.raw_matl_grp_id = rm.raw_matl_grp_id
				and rmm.raw_matl_id = rm.raw_matl_id
				and rmm.mill_id = $mill_id
				and rmm.active_flag = 'Y'
				and rm.class = 'P'
				and rmm.calc_price_flag = 'Y';

		echo PURCHASED $raw_matl_grp_id, $raw_matl_id;

# For each Raw Material, calculate the cost based upon the product code and the active weight
			let sum_cost = 0;
			let sum_active_wgt = 0;
			foreach select product_code_id, active_wgt
					from raw_matl_invent
					where mill_id = $mill_id
					and raw_matl_grp_id = $raw_matl_grp_id
					and raw_matl_id = $raw_matl_id;

		echo $product_code_id, $active_wgt;

# Get the average cost of the product code
				Call GetProductCodeAvgCost();

				let sum_active_wgt = $sum_active_wgt + $active_wgt;
# Calculate the average cost for the active weight
				select wgt_net, percent_active
					from acs_product_code
					where product_code_id = $product_code_id;

				Call GetNewCost();

				let sum_cost = $sum_cost + $new_cost;

			end foreach

# Update the unit cost of the raw material
			if ($sum_active_wgt > 0) then

# Adjust with the percent active of the raw material		
				select percent_active
					from raw_matl_mill
					where mill_id = $mill_id
					and raw_matl_grp_id = $raw_matl_grp_id
					and raw_matl_id = $raw_matl_id;
				let cost_unit = ($sum_cost / $sum_active_wgt) * ($percent_active /100);

				update raw_matl_mill
					set cost_unit = $cost_unit, ts_modified = $curr_time
					where mill_id = $mill_id
					and raw_matl_grp_id = $raw_matl_grp_id
					and raw_matl_id = $raw_matl_id;
			end if

		end foreach

#------------ Get second the intermediates raw materials required to be calculated
		foreach select rmm.raw_matl_grp_id, rmm.raw_matl_id, rm.grade_spec
				from raw_matl_mill rmm, raw_matl rm
				where rmm.raw_matl_grp_id = rm.raw_matl_grp_id
				and rmm.raw_matl_id = rm.raw_matl_id
				and rmm.mill_id = $mill_id
				and rmm.active_flag = 'Y'
				and rm.class = 'I'
				and rmm.calc_price_flag = 'Y';

		echo INTERMEDIATE $raw_matl_grp_id, $raw_matl_id, $grade_spec;

# Look for all the standard chemical recipes for this grade_spec
			let sum_cost = 0;
			let sum_active_wgt = 0;
			foreach select machine_id, machine_type
				from acs_disrecipe_view
				where mill_id = $mill_id
				and grade_spec_made = $grade_spec
				and class = 'A';
			
				if $USEMETRIC = "Y" then
					let sum_active_wgt = $sum_active_wgt + 1000;
				else
					let sum_active_wgt = $sum_active_wgt + 2000;
				end if

				foreach select raw_matl_grp_id rm_grp_child, raw_matl_id  rm_id_child, quantity
					from recipe
					where mill_id = $mill_id
					and machine_type = $machine_type
					and machine_id = $machine_id
					and grade_spec_made = $grade_spec
					and class = 'A';

					select cost_unit
						from raw_matl_mill
						where mill_id = $mill_id
						and raw_matl_grp_id = $rm_grp_child
						and raw_matl_id = $rm_id_child;

					let sum_cost = $sum_cost + $quantity * $cost_unit;

				end foreach

			end foreach 		

# Update the unit cost of the raw material
			if ($sum_active_wgt > 0) then

# Adjust with the percent active of the raw material		
				select percent_active
					from raw_matl_mill
					where mill_id = $mill_id
					and raw_matl_grp_id = $raw_matl_grp_id
					and raw_matl_id = $raw_matl_id;
				let cost_unit = ($sum_cost / $sum_active_wgt) * ($percent_active /100);

				update raw_matl_mill
					set cost_unit = $cost_unit, ts_modified = $curr_time
					where mill_id = $mill_id
					and raw_matl_grp_id = $raw_matl_grp_id
					and raw_matl_id = $raw_matl_id;
			end if

		end foreach

	end foreach

	INCLUDE "raw_matl_inv_audit";


