#============================================================================
# MxUpdate rules for acs_Genealogy_perc
#
# This rule is used to calculate the Genealogy percentage for all units. This
# percentage is calculated as the parent units are consumed. There are 3 kinds 
# of Genealogy types: turnups, slaboffs and trimlosses.
#
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#  1.0   01/15/08   PKC     Initial release
#  2.0   01/28/09   GVG     Add new fields to acs_genealogy table
#  3.0   01/16/09   GVG     Get length_begin-length_end for splice length rather than min(length_end)
#  4.0   01/16/09   GVG     Use turnup length from unit as starting point
#  5.0   02/18/09   GVG     Divide area_net by 100
#  6.0   02/20/09   GVG     Define length as long
#  7.0   02/20/09   GVG     Slabbed length needs to be added to total length
#  8.0   02/20/09   GVG     Always get turnup percentage for inventory units when calculating slab off
#  9.0   04/06/09   GVG     Added genealogy perc record for beatering
#  10.0  04/09/09   GVG     Get slaboff_alloc flag from acs_loss_alloc table
#  11.0  04/15/09   GVG     Populate acs_cost and raw_matl_invent for beatering 
#  12.0  04/29/09   GVG     Check against right type_code_src value when inserting to acs_genealogy
#  13.0  05/28/09   GVG     Update avg_cost_per_unit and populate raw_matl_trans on beater
#  14.0  08/14/09   BRN	    Replace MMMprod with MMMplan for acs_unit_route, acs_cost
#  15.0  08/24/09   BRN	    Add the LeadTime to the table acs_cost
#  16.0  10/20/09   BRN	    Fix issues in calculating the area_net and use LengthToWidthFactor 
#  17.0  11/06/09   GVG     width_act should be width_turnup in length_turnup calculations
#  18.0  12/02/09   GVG     Area net for trimloss should be the percentage of the parent rather than child
#  18.0  01/21/10   BRN	    Add cons_mmm into acs_cost
#  19.0  09-Feb-10  PHH     defined genealogy_perc as double dur to insert error
#  20.0  28-Sep-10  BRN	    add acs_genealogy.ts_modified
#=============================================================================================
DEFINE USEMETRIC ENV;
DEFINE length_slab long;
DEFINE slaboff_alloc long;
DEFINE length long;
DEFINE MXLANG env;
DEFINE get_curr_time LONG;
DEFINE units_act LONG;
DEFINE units_loss LONG;
DEFINE new_active_wgt DOUBLE;
DEFINE new_cost DOUBLE;
DEFINE genealogy_perc DOUBLE;
#============================================================================
# ERROR RULE, DO EVERY TIME AN ERROR OCCURS
#============================================================================

SUBROUTINE ACSGenealogyPerc()

	let ts_create = {time};
	let total_percent = 0;
	Call UnitGenealogy();
	
END SUBROUTINE
#9 start
SUBROUTINE BeaterAcsGenealogyPerc()

	IF ($acs_type_code = "J") THEN
		let parent_id = $jumbo_id;
	ELSE
		let parent_id = $unit_id;
	END IF
	let child_id = " ";
	let ts_create = {time};
	let ts_adj = $ts_create;
	let wgt_loss = $wgt_scaled - $wgt_tare;
	let tc_src = "S";
	let area_net = (($width_act / $LengthToWidthFactor) * $length_lineal ) / 1000 ;
	let genealogy_perc = 100;
	call InsertACSGenealogyPerc();
	call AcsDirectCost();
	let new_cost = $cost * (-1);
	let new_active_wgt = $active_wgt;
	call UpdateProductAvgCost();
	IF ($FIBERMGT = "Y") THEN
		call RawMatlInvent();
		call InsertRawMatlTrans();
	END IF

END SUBROUTINE
#9 end
SUBROUTINE UnitGenealogy()

	select alloc_flag
		from acs_loss_alloc
		where reject_id = $reject_id
		and machine_type = $mach_type_rej;

	IF ($success = 0) THEN
		let slaboff_alloc = 0;
	ELSE IF ($alloc_flag = "N") THEN
		let slaboff_alloc = 0;
	ELSE
		let slaboff_alloc = 1;
	END IF
	END IF

	IF ($acs_type_code = "J") then
		let tc_src = "U";
		Call JumboGenealogy();
		let tc_src = "S";

		IF ($slaboff_alloc = 1) THEN
			Call JumboSlaboffGenealogy();
		ELSE
			call UnallJumboSlaboff();
			
		END IF
		let tc_src = "T";
		Call JumboTrimLossGenealogy();
	else
		let tc_src = "U";
		Call InventGenealogy();

		let tc_src = "S";
		IF ($slaboff_alloc = 1) THEN
			Call InventSlaboffGenealogy();
		ELSE
			call UnallInventSlaboff();
		END IF
		let tc_src = "T";
		Call InventTrimLossGenealogy();
	End if

		
END SUBROUTINE

SUBROUTINE AcsDirectCost()

	select broke_id
		from grade_spec 
		where grade_spec = $grade_spec;

	select product_code_id 
		from acs_broke_xref 
		where broke_id = $broke_id
		and active_flag <> 'N';

	select mkt_cost_per_unit
		from acs_product_mill
		where product_code_id = $product_code_id
		and mill_id = $mill_id;

	IF ($success = 0) THEN

		select mkt_cost_per_unit
			from acs_product_mill
			where product_code_id = $product_code_id
			and mill_id = ' ';

	END IF

	select percent_active, wgt_net, raw_matl_grp_id, raw_matl_id, unit_meas pc_unit_meas
		from acs_product_code
		where product_code_id = $product_code_id
		and active_flag <> 'N';

	let percent_active = $percent_active / 100;
	let units_loss = 1;
	let loss_qty = $units_loss;
	let loss_price = ($units_loss * $mkt_cost_per_unit);
	let serial_key_id = "RAWMATL";
	let serial_mill_id = $mill_id;
	let serial_informat = "&&&&&&&&";
	let serial_prefix = "RM-M-",$acs_type_code:"U","-";
	
	call GET_COST_ID();
		
	let serial_cost_id =$serial_cost_id;
	let cost_id = $serial_cost_id;
	let cost_id_group = "";
	let cost_type = "R";
	let mill_id = $mill_id;
	let machine_type = "BR";
	let machine_id = $mx_station_id;
	let warehouse_id = "";
	let whse_zone_id = "";
	let bay_id = "";
	let ts_begin = 0; 
	let ts_end = 0; 
	let mill_id_plan = "";
	let mach_type_plan = ""; 
	let mach_id_plan = "";
	let run_num = 0;
	let pat_num = 0;
	IF ($acs_type_code = "J") THEN
		let unit_id = $jumbo_id;
	END IF
	let type_code = $acs_type_code;
	let product_code_id = $product_code_id;
	let fin_matl_grp_id = " ";
	let fin_matl_id = " "; 
	let quantity = $wgt_loss;
	let active_wgt = $quantity * $percent_active;
	let units_act = $units_loss;
	IF ($USEMETRIC = "Y") THEN
		let unit_meas = "KGS";
	ELSE
		let unit_meas = "LBS";
	END IF
	let cost = 0 - $loss_price;
	select string_value 
		from constants
		where key_value ='MILL_CURRENCY';
	let currency_id = $string_value;
	let acct_seg_id = " ";
	let order_id = " ";
	let item_num = 0;
	let load_id = " ";
	let cost_driver_id = "UNIT";
	let cost_type_id = " ";
	let allocated_flag = "N";
	let ts_allocated = 0;
	let reason_id = " ";
	let user_id = $USER;
	let appl_name = $unit_id,$mx_station,$mx_action_code;
	let closure_flag = "N";
	let ts_closed = 0;
	let ts_modified = 0;
	let ts_create = {time};
	let sec_lead_time = 0;

# rev 18.0
	let cons_mill_id = $mill_id;
	let cons_mach_type = "BR";
	let cons_mach_id = $mx_station_id;

	call INSERT_ACS_COST();
		
	let unit_meas = $pc_unit_meas;

END SUBROUTINE

SUBROUTINE RemAcsCost()

	let reason_id = "ALLOC_UNB";

	let curr_time = {time};
	
	select closure_flag, allocated_flag
		from acs_cost
		where unit_id = $unit_id
		and machine_type = 'BR';

	IF ($success = 1) THEN

		IF ($closure_flag = "N" and $allocated_flag = "N") THEN
			delete from acs_cost 
				where unit_id = $unit_id 
				and machine_type = 'BR';
		ELSE IF ($closure_flag = "N" and $allocated_flag = "Y") THEN
			delete from acs_cost 
				where unit_id = $unit_id 
				and machine_type = 'BR';

			select unit_id x
				from acs_direct_cost
				where unit_id = $unit_id
				and machine_type = 'BR';

			IF ($success = 1) THEN
				delete from acs_direct_cost 
					where unit_id = $unit_id 
					and machine_type = 'BR';
			END IF
		ELSE IF ($closure_flag = "Y") THEN
			update acs_cost 
				set reason_id = $reason_id, 
				ts_modified = $curr_time 
				where unit_id = $unit_id 
				and machine_type = 'BR';
		END IF
		END IF
		END IF
	END IF
END SUBROUTINE

SUBROUTINE DecRawMatlInvent()

	select broke_id
		from grade_spec 
		where grade_spec = $grade_spec;

	select product_code_id 
		from acs_broke_xref 
		where broke_id = $broke_id
		and active_flag <> 'N';

	select mkt_cost_per_unit
		from acs_product_mill
		where product_code_id = $product_code_id
		and mill_id = $mill_id;

	select percent_active, wgt_net, raw_matl_grp_id, raw_matl_id
		from acs_product_code
		where product_code_id = $product_code_id
		and active_flag <> 'N';

	let wgt_loss = $wgt_scaled - $wgt_tare;
	let percent_active = $percent_active / 100;
	IF ($wgt_net <> 0) THEN
	let units_loss = $wgt_loss / $wgt_net;
	ELSE
	let units_loss = 0;
	END IF
	let loss_qty = $units_loss;
	let loss_price = ($units_loss * $mkt_cost_per_unit);
	let cost = $mkt_cost_per_unit;
	let quantity = $wgt_loss * ($percent_active);
	let active_wgt = $quantity;
	let units_act = $units_loss;
	IF ($USEMETRIC = "Y") THEN
		let unit_meas = "KGS";
	ELSE
		let unit_meas = "LBS";
	END IF

	let whse_key_value = "ACS_",$mill_id,"_BEATERWH";
	let get_curr_time = {time};
	let whse_zone_id = "BR";
	let bay_id = $mx_station_id;

	select string_value warehouse_id
		from constants
		where key_value = $whse_key_value;

	IF ($success = 0) THEN
		let warehouse_id = "BEATERWH";
	END IF

	select units_act curr_units_act
		from raw_matl_invent
		where mill_id = $mill_id
		and warehouse_id = $warehouse_id
		and bay_id = $bay_id
		and whse_zone_id = $whse_zone_id
		and product_code_id = $product_code_id;

	IF ($curr_units_act > $units_act or $curr_units_act = $units_act) THEN
		call SubRawMatlInvent();
	ELSE
		let units_act = 0;
		let quantity = 0;
		let active_wgt = 0;
		call UpdRawMatlInvent();
	END IF

	select ts_adj
		from raw_matl_trans
		where raw_matl_id = $raw_matl_id
		and raw_matl_grp_id = $raw_matl_grp_id
		and mill_id = $mill_id
		order by ts_adj desc;

	IF ($success = 1) THEN
		delete from raw_matl_trans
			where raw_matl_id = $raw_matl_id
			and raw_matl_grp_id = $raw_matl_grp_id
			and mill_id = $mill_id
			and ts_adj = $ts_adj;
	END IF

END SUBROUTINE

SUBROUTINE RawMatlInvent()

	let whse_key_value = "ACS_",$mill_id,"_BEATERWH";
	let get_curr_time = {time};
	let whse_zone_id = "BR";
	let bay_id = $mx_station_id;

	select string_value warehouse_id
		from constants
		where key_value = $whse_key_value;

	IF ($success = 0) THEN
		let warehouse_id = "BEATERWH";
	END IF

	call AddRawMatlInvent();

END SUBROUTINE

SUBROUTINE DelACSGenealogyPerc()


	select unit_id x
		from acs_genealogy
		where parent_id = $parent1;

	IF ($success = 1) THEN
		delete from acs_genealogy
		where parent_id = $parent1;
	END IF

END SUBROUTINE


SUBROUTINE JumboGenealogy()

## Calc JumboArea
	select jumbo.width_act width_turnup, acs_unit_route.area_net area_parent , jumbo.mill_id, jumbo.wgt_slabbed, acs_unit_route.wgt_net wgt_turnup
	  from jumbo, acs_unit_route
	 where  jumbo.jumbo_id = acs_unit_route.unit_id
		and acs_unit_route.type_code = 'J'
		and acs_unit_route.mx_action_code in ('TURNUP','PALLETIZE')
		and jumbo.jumbo_id = $jumbo_id;
#17	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_act);
	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_turnup);

	IF ($wgt_turnup <> 0) THEN
		let length_slab = ($wgt_slabbed / $wgt_turnup) * $length_turnup;
	ELSE
		let length_slab = 0;
	END IF

## In case Jumbo to Jumbo ######################################################
	let tot_lene=0;
	foreach
		select distinct splices.ts_wound wound_time,(length_begin - length_end) lene
			from splices, jumbo
			where splices.parent_id = $jumbo_id
			and splices.unit_id = jumbo.jumbo_id;

		let tot_lene = $tot_lene + $lene;
	end foreach

	let length = $tot_lene + $length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	foreach
		select splices.unit_id child_id, parent_id,width_begin, length_begin, width_end, length_end, 
			splices.machine_type machine_type, splices.machine_id machine_id, stat
		  from splices, jumbo
		 where splices.parent_id = $jumbo_id
		 and splices.unit_id = jumbo.jumbo_id;

		let type_code = "J";
		LET width_unit = $width_end - $width_begin;
		LET length_unit = $length_begin - $length_end;
		LET area_unit = (($width_unit / $LengthToWidthFactor) * $length_unit ) / 1000 ;
			IF ($area_parent <> 0) THEN
				LET genealogy_perc =( $area_unit / $area_parent) * 100;
			ELSE
				let genealogy_perc = 0;
			END IF
			if ($genealogy_perc < 0) THEN
				let genealogy_perc = 0;
			end if
			let genealogy_perc = $genealogy_perc:"##&.&##";
			let total_percent = $total_percent + $genealogy_perc;
			let area_net = $area_unit;
		Call InsertACSGenealogyPerc();
	end foreach

## In case Jumbo to Invent ######################################################
	let tot_lene = 0;
	foreach
	select distinct splices.ts_wound wound_time,(length_begin-length_end) lene
		from splices, invent
		where splices.parent_id = $jumbo_id
		and splices.unit_id = invent.unit_id;

		let tot_lene = $tot_lene + $lene;
	end foreach
	let length = $tot_lene + $length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	foreach
		select splices.unit_id child_id, invent.type_code,splices.parent_id,width_begin, length_begin, width_end, length_end,
			splices.machine_type machine_type, splices.machine_id machine_id, stat
		  from splices, invent
		 where splices.parent_id = $jumbo_id
		 and splices.unit_id = invent.unit_id;

		LET width_unit = $width_end - $width_begin;
		LET length_unit = $length_begin - $length_end;
		LET area_unit = (($width_unit / $LengthToWidthFactor) * $length_unit ) / 1000 ;
		IF ($area_parent <> 0) THEN
			LET genealogy_perc =( $area_unit / $area_parent) * 100;			
		ELSE
			let genealogy_perc = 0;
		END IF
		if ($genealogy_perc < 0) THEN
			let genealogy_perc = 0;
		end if
		let genealogy_perc = $genealogy_perc:"##&.&##";
		let tot_perc = $tot_perc + $genealogy_perc;
		let area_net = $area_unit;
		let total_percent = $total_percent + $genealogy_perc;
		Call InsertACSGenealogyPerc();
	end foreach

END SUBROUTINE

SUBROUTINE InsertACSGenealogyPerc()

	select unit_id x from acs_genealogy
		where unit_id = $child_id
		and parent_id = $parent_id
		and type_code_src = $tc_src;

	IF ($success = 0) THEN

		insert into acs_genealogy (unit_id, type_code, parent_id, type_code_parent, type_code_src, 
			mill_id, machine_type, machine_id, percentage, ts_create, area_net, ts_modified)
		values ($child_id, $type_code, $parent_id, $acs_type_code, $tc_src, $mill_id, $machine_type, 
			$machine_id, $genealogy_perc, $ts_create, $area_net, 0);

	END IF

END SUBROUTINE


SUBROUTINE JumboSlabOffGenealogy()

	select jumbo.width_act width_turnup, acs_unit_route.area_net area_parent , jumbo.mill_id, jumbo.wgt_slabbed, acs_unit_route.wgt_net wgt_turnup
	  from jumbo, acs_unit_route
	 where  jumbo.jumbo_id = acs_unit_route.unit_id
		and acs_unit_route.type_code = 'J'
		and acs_unit_route.mx_action_code in ('TURNUP','PALLETIZE')
		and jumbo.jumbo_id = $jumbo_id;
#17	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_act);
	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_turnup);
	IF ($wgt_turnup <> 0) THEN
		let length_slab = ($wgt_slabbed / $wgt_turnup) * $length_turnup;
	ELSE
		let length_slab = 0;
	END IF
	let tot_lene = 0;
	foreach
	select distinct splices.ts_wound wound_time, (length_begin-length_end) lene
		from splices, jumbo
		where splices.parent_id = $jumbo_id
		and splices.unit_id = jumbo.jumbo_id;
		let tot_lene = $tot_lene + $lene;
	end foreach
	let length = $tot_lene + $length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	LET area_slab = (($width_turnup / $LengthToWidthFactor) * $length_slab) / 1000 ;

	IF ($area_parent <> 0) THEN
		let slab_perc = ($area_slab / $area_parent);
	ELSE
		let slab_perc = 0;
	END IF

	select sum(percentage) turnup_perc
		from acs_genealogy
		where parent_id = $jumbo_id
		and type_code_src = 'U';

	let turnup_perc = $turnup_perc / 100;

#Get slaboffs for child jumbos
	foreach

		select splices.unit_id child_id, parent_id,width_begin, length_begin, width_end, length_end, 
			splices.machine_type machine_type, splices.machine_id machine_id, stat
		  from splices, jumbo
		 where splices.parent_id = $jumbo_id
		 and splices.unit_id = jumbo.jumbo_id;

		let type_code = "J";
		LET width_unit = $width_end - $width_begin;
		LET length_unit = $length_begin - $length_end;
		LET area_unit = (($width_unit / $LengthToWidthFactor) * $length_unit) / 1000 ;

		if ($area_parent <> 0) THEN
			let area_perc = $area_unit / $area_parent;
		else
			let area_perc = 0;
		end if
		let area_perc = $area_perc:"##&.&####";

		IF ($area_parent <> 0) THEN
			LET genealogy_perc =(($area_perc)  * ($slab_perc / $turnup_perc) * 100);

		ELSE
			let genealogy_perc = 0;
		END IF
		if ($genealogy_perc < 0) THEN
			let genealogy_perc = 0;
		end if
		let genealogy_perc = $genealogy_perc:"##&.&##";
		let tot_perc = $tot_perc + $genealogy_perc;
		let area_net = $area_unit * ($genealogy_perc / 100);
		let total_percent = $total_percent + $genealogy_perc;
		Call InsertACSGenealogyPerc(); 

	end foreach

	let tot_lene = 0;
	foreach
	select distinct splices.ts_wound wound_time,(length_begin-length_end) lene
		from splices, invent
		where splices.parent_id = $jumbo_id
		and splices.unit_id = invent.unit_id;
	let tot_lene = $tot_lene + $lene;
	end foreach

	let length = $tot_lene + $length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

#Get slaboffs for child units
	foreach

		select splices.unit_id child_id, invent.type_code,splices.parent_id,width_begin, length_begin, width_end, length_end, 
			splices.machine_type machine_type, splices.machine_id machine_id, stat
		  from splices, invent
		 where splices.parent_id = $jumbo_id
		 and splices.unit_id = invent.unit_id;

		LET width_unit = $width_end - $width_begin;
		LET length_unit = $length_begin - $length_end;
		LET area_unit = (($width_unit / $LengthToWidthFactor) * $length_unit) / 1000 ;

		if ($area_parent <> 0) THEN
			let area_perc = $area_unit / $area_parent;
		else
			let area_perc = 0;
		end if
		let area_perc = $area_perc:"##&.&####";
		IF ($area_parent <> 0 and $turnup_perc <> 0) THEN
			LET genealogy_perc =( (($area_perc ) * ($slab_perc / $turnup_perc)) * 100);
		ELSE
			let genealogy_perc = 0;
		END IF
			if ($genealogy_perc < 0) THEN
				let genealogy_perc = 0;
			end if
			let genealogy_perc = $genealogy_perc:"##&.&##";
			let tot_perc = $tot_perc + $genealogy_perc;
			let area_net = $area_unit * ($genealogy_perc / 100);
			let total_percent = $total_percent + $genealogy_perc;
			Call InsertACSGenealogyPerc();

	end foreach

END SUBROUTINE

SUBROUTINE UnallJumboSlaboff()

	select jumbo.width_act width_turnup, acs_unit_route.area_net area_parent , jumbo.mill_id, jumbo.wgt_slabbed, acs_unit_route.wgt_net wgt_turnup
	  from jumbo, acs_unit_route
	 where  jumbo.jumbo_id = acs_unit_route.unit_id
		and acs_unit_route.type_code = 'J'
		and acs_unit_route.mx_action_code in ('TURNUP','PALLETIZE')
		and jumbo.jumbo_id = $jumbo_id;
#17	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_act);
	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_turnup);

	IF ($wgt_turnup <> 0) THEN
		let length_slab = ($wgt_slabbed / $wgt_turnup) * $length_turnup;
	ELSE
		let length_slab = 0;
	END IF

	let tot_lene = 0;
	foreach
	select distinct splices.ts_wound wound_time, (length_begin-length_end) lene
		from splices, jumbo
		where splices.parent_id = $jumbo_id
		and splices.unit_id = jumbo.jumbo_id;
	let tot_lene = $tot_lene + $lene;
	end foreach

	foreach
	select distinct splices.ts_wound wound_time,(length_begin-length_end) lene
		from splices, invent
		where splices.parent_id = $jumbo_id
		and splices.unit_id = invent.unit_id;
	let tot_lene = $tot_lene + $lene;
	end foreach

	let length = $tot_lene + $length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	LET area_slab = (($width_turnup / $LengthToWidthFactor) * $length_slab) / 1000 ;

	IF ($area_parent <> 0) THEN
		let slab_perc = ($area_slab / $area_parent);
	ELSE
		let slab_perc = 0;
	END IF
	let parent_id = $jumbo_id;
	let child_id = " ";
	let ts_create = {time};
	let tc_src = "S";
	let area_net = $area_slab;
	let genealogy_perc = $slab_perc * 100;
	call InsertACSGenealogyPerc();
	let total_percent = $total_percent + $genealogy_perc;

END SUBROUTINE

SUBROUTINE UnallInventSlaboff()

	select invent.width_act width_turnup, acs_unit_route.area_net area_parent , invent.wgt_slabbed, acs_unit_route.wgt_net wgt_turnup,
		acs_unit_route.mill_id
	  from invent, acs_unit_route
	 where  invent.unit_id = acs_unit_route.unit_id
		and acs_unit_route.type_code = $acs_type_code
		and acs_unit_route.mx_action_code in ('TURNUP','PALLETIZE')
		and invent.unit_id = $unit_id;
#17	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_act);
	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_turnup);

	IF ($wgt_turnup <> 0) THEN
		let length_slab = ($wgt_slabbed / $wgt_turnup) * $length_turnup;
	ELSE
		let length_slab = 0;
	END IF

	let tot_lene = 0;
	foreach
	select  distinct splices.ts_wound wound_time,(length_begin-length_end) lene
		from splices, invent
		where splices.parent_id = $unit_id
		and splices.unit_id = invent.unit_id;
	let tot_lene = $tot_lene + $lene;
	end foreach
	let length = $tot_lene+$length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	LET area_slab = (($width_turnup / $LengthToWidthFactor) * $length_slab) / 1000 ;

	IF ($area_parent <> 0) THEN
		let slab_perc = $area_slab / $area_parent;
	ELSE
		let slab_perc = 0;
	END IF

	let parent_id = $unit_id;
	let child_id = " ";
	let ts_create = {time};
	let tc_src = "S";
	let area_net = $area_slab;
	let genealogy_perc = $slab_perc * 100;
	call InsertACSGenealogyPerc();
	let total_percent = $total_percent + $genealogy_perc;

END SUBROUTINE


SUBROUTINE JumboTrimLossGenealogy()

	select jumbo.width_act width_turnup, acs_unit_route.area_net area_parent , jumbo.mill_id, jumbo.wgt_slabbed, acs_unit_route.wgt_net wgt_turnup
	  from jumbo, acs_unit_route
	 where  jumbo.jumbo_id = acs_unit_route.unit_id
		and acs_unit_route.type_code = 'J'
		and acs_unit_route.mx_action_code in ('TURNUP','PALLETIZE')
		and jumbo.jumbo_id = $jumbo_id;
#17	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_act);
	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_turnup);

	let length_slab = ($wgt_slabbed / $wgt_turnup) * $length_turnup;

	let tot_lene = 0;
	foreach
	select distinct splices.ts_wound wound_time,(length_begin-length_end) lene
		from splices, jumbo
		where splices.parent_id = $jumbo_id
		and splices.unit_id = jumbo.jumbo_id;

	let tot_lene = $tot_lene + $lene;
	end foreach

	let length = $tot_lene + $length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	select sum(percentage) turnup_perc
		from acs_genealogy
		where parent_id = $jumbo_id
		and type_code_src = 'U';
	
	select sum(percentage) turnupandslab_perc
		from acs_genealogy
		where parent_id = $jumbo_id
		and type_code_src in ('U','S');

	let loss_perc = 100 - $turnupandslab_perc;

	select count(*) spl_cnt_j
		from splices, jumbo
		where splices.parent_id = $jumbo_id
		and splices.unit_id = jumbo.jumbo_id;

	let tot_perc = 0;
	let row_cnt_j = 0;


	let turnup_perc = $turnup_perc / 100;
	let loss_perc = $loss_perc / 100;
		foreach

			select unit_id child_id, parent_id, splices.machine_type, splices.machine_id, stat,
				length_end, length_begin, width_begin, width_end
				from splices, jumbo
				where splices.parent_id = $jumbo_id
				and splices.unit_id = jumbo.jumbo_id;


			let type_code = "J";
			let length_child = $length_begin - $length_end;
			let row_cnt_j = $row_cnt_j + 1;
			let width_child = $width_end - $width_begin;
			LET area_child = (($width_child/ $LengthToWidthFactor) * $length_child ) / 1000 ;
			if ($area_parent <> 0) then
			let area_perc = $area_child / $area_parent;
			else
			let area_perc = 0;
			end if
			let area_perc = $area_perc:"##&.&####";
			IF ($row_cnt_j < $spl_cnt_j) THEN
				IF ($area_parent <> 0) THEN
				let genealogy_perc = ((($area_perc ) * ($loss_perc / $turnup_perc)) * 100);
				ELSE
				let genealogy_perc = 0;
				END IF
				if ($genealogy_perc < 0) THEN
					let genealogy_perc = 0;
				end if
				let genealogy_perc = $genealogy_perc:"##&.&##";
				let tot_perc = $tot_perc + $genealogy_perc;
			ELSE
				let genealogy_perc = 100 - $total_percent;
				if ($genealogy_perc < 0) THEN
					let genealogy_perc = 0;
				end if
				let genealogy_perc = $genealogy_perc:"##&.&##";
			END IF
			let total_percent = $total_percent + $genealogy_perc;
			let area_net = $area_parent * ($genealogy_perc / 100);
			call InsertACSGenealogyPerc();
		
		end foreach

#Get trim loss for child rolls

	let tot_lene = 0;
	foreach
	select distinct splices.ts_wound wound_time,(length_begin-length_end) lene
		from splices, invent
		where splices.parent_id = $jumbo_id
		and splices.unit_id = invent.unit_id;
	let tot_lene = $tot_lene + $lene;
	end foreach
	let length = $tot_lene + $length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	select count(*) spl_cnt_j
		from splices, invent
		where splices.parent_id = $jumbo_id
		and splices.unit_id = invent.unit_id;

	let tot_perc = 0;
	let row_cnt_j = 0;

		foreach
			select splices.unit_id child_id, invent.type_code,splices.parent_id, splices.machine_type, splices.machine_id,stat,
				length_end, length_begin, width_begin, width_end
				from splices, invent
				where splices.parent_id = $jumbo_id
				and splices.unit_id = invent.unit_id;

			let length_child = $length_begin - $length_end;
			let row_cnt_j = $row_cnt_j + 1;
			let width_child = $width_end - $width_begin;
			LET area_child = (($width_child / $LengthToWidthFactor) * $length_child) / 1000 ;
			if ($area_parent <> 0) THEN
				let area_perc = $area_child / $area_parent;
			else
				let area_perc = 0;
			end if
			let area_perc = $area_perc:"###.#####";
			IF ($row_cnt_j < $spl_cnt_j) THEN
			IF ($area_parent <> 0) THEN
				let genealogy_perc = ((($area_perc ) * ($loss_perc / $turnup_perc)) * 100);
			ELSE
				let genealogy_perc = 0;
			END IF
				if ($genealogy_perc < 0) THEN
					let genealogy_perc = 0;
				end if
				let genealogy_perc = $genealogy_perc:"##&.&##";
				let tot_perc = $tot_perc + $genealogy_perc;
			ELSE
				let genealogy_perc = 100 - $total_percent;
				if ($genealogy_perc < 0) THEN
					let genealogy_perc = 0;
				end if

				let genealogy_perc = $genealogy_perc:"##&.&##";
			END IF
			let total_percent = $total_percent + $genealogy_perc;
			let area_net = $area_parent * ($genealogy_perc / 100);
			call InsertACSGenealogyPerc();

		end foreach

			
END SUBROUTINE

SUBROUTINE InventGenealogy()

## Calc Area
	select invent.width_act width_turnup, acs_unit_route.area_net area_parent , invent.wgt_slabbed, acs_unit_route.wgt_net wgt_turnup,
		acs_unit_route.mill_id
	  from invent, acs_unit_route
	 where  invent.unit_id = acs_unit_route.unit_id
		and acs_unit_route.type_code = $acs_type_code
		and acs_unit_route.mx_action_code in ('TURNUP','PALLETIZE')
		and invent.unit_id = $unit_id;
#17	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_act);
	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_turnup);

	let length_slab = ($wgt_slabbed / $wgt_turnup) * $length_turnup;

	let tot_lene = 0;
	foreach
	select distinct splices.ts_wound wound_time,(length_begin-length_end) lene
		from splices, invent
		where splices.parent_id = $unit_id
		and splices.unit_id = invent.unit_id;
		let tot_lene = $tot_lene + $lene;
	end foreach
	let length = $tot_lene+$length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	foreach
		select splices.unit_id child_id, invent.type_code,splices.parent_id,width_begin, length_begin, width_end, length_end,
			splices.machine_type machine_type, splices.machine_id machine_id, stat
		  from splices, invent
		 where splices.parent_id = $unit_id
		 and splices.unit_id = invent.unit_id;

		LET width_unit = $width_end - $width_begin;
		LET length_unit = $length_begin - $length_end;
		LET area_unit = (($width_unit / $LengthToWidthFactor) * $length_unit) / 1000 ;
		IF ($area_parent <> 0) THEN
			LET genealogy_perc =( $area_unit / $area_parent) * 100;		
		ELSE
			let genealogy_perc = 0;
		END IF
		if ($genealogy_perc < 0) THEN
			let genealogy_perc = 0;
		end if
		let genealogy_perc = $genealogy_perc:"##&.&##";
		let tot_perc = $tot_perc + $genealogy_perc;
		let total_percent = $total_percent + $genealogy_perc;
		let area_net = $area_unit;

		Call InsertACSGenealogyPerc();
	end foreach


END SUBROUTINE

SUBROUTINE InventSlabOffGenealogy()

	select invent.width_act width_turnup, acs_unit_route.area_net area_parent , invent.wgt_slabbed, acs_unit_route.wgt_net wgt_turnup,
		acs_unit_route.mill_id
	  from invent, acs_unit_route
	 where  invent.unit_id = acs_unit_route.unit_id
		and acs_unit_route.type_code = $acs_type_code
		and acs_unit_route.mx_action_code in ('TURNUP','PALLETIZE')
		and invent.unit_id = $unit_id;
#17	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_act);
	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_turnup);

	IF ($wgt_turnup <> 0) THEN
		let length_slab = ($wgt_slabbed / $wgt_turnup) * $length_turnup;
	ELSE
		let length_slab = 0;
	END IF

	let tot_lene = 0;
	foreach
	select  distinct splices.ts_wound wound_time,(length_begin-length_end) lene
		from splices, invent
		where splices.parent_id = $unit_id
		and splices.unit_id = invent.unit_id;
	let tot_lene = $tot_lene + $lene;
	end foreach
	let length = $tot_lene+$length_slab;

	select sum(percentage) turnup_area
		from acs_genealogy
		where parent_id = $unit_id
		and type_code_src = 'U';

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;
	ELSE
		let length_turnup = $length;
#		let turnup_area = 100;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	LET area_slab = (($width_turnup / $LengthToWidthFactor) * $length_slab) / 1000 ;

	IF ($area_parent <> 0) THEN
	let slab_perc = $area_slab / $area_parent;
	ELSE
	let slab_perc = 0;
	END IF
	
	let turnup_area = $turnup_area / 100;
#Get slaboffs for child units
	foreach

		select splices.unit_id child_id,invent.type_code, splices.parent_id,width_begin, length_begin, width_end, length_end, 
			splices.machine_type machine_type, splices.machine_id machine_id, stat
		  from splices, invent
		 where splices.parent_id = $unit_id
		 and splices.unit_id = invent.unit_id;

		LET width_unit = $width_end - $width_begin;
		LET length_unit = $length_begin - $length_end;
		LET area_unit = (($width_unit / $LengthToWidthFactor) * $length_unit) / 1000 ;

		if ($area_parent <> 0) THEN
		let area_perc = $area_unit / $area_parent;
		else
		let area_perc = 0;
		end if
		let area_perc = $area_perc:"##&.&####";
		IF ($area_parent <> 0 and $turnup_area <> 0) THEN
			LET genealogy_perc =( (($area_perc ) * ($slab_perc / $turnup_area)) * 100);
		ELSE
			let genealogy_perc = 0;
		END IF
			if ($genealogy_perc < 0) then
				let genealogy_perc = 0;
			end if
			let genealogy_perc = $genealogy_perc:"##&.&##";
			let tot_perc = $tot_perc + $genealogy_perc;
			let total_percent = $total_percent + $genealogy_perc;
			let area_net = $area_unit * ($genealogy_perc / 100);
			Call InsertACSGenealogyPerc();

	end foreach

END SUBROUTINE

SUBROUTINE InventTrimLossGenealogy()

	select invent.width_act width_turnup, acs_unit_route.area_net area_parent , invent.wgt_slabbed, acs_unit_route.wgt_net wgt_turnup,
		acs_unit_route.mill_id
	  from invent, acs_unit_route
	 where  invent.unit_id = acs_unit_route.unit_id
		and acs_unit_route.type_code = $acs_type_code
		and acs_unit_route.mx_action_code in ('TURNUP','PALLETIZE')
		and invent.unit_id = $unit_id;
#17	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_act);
	let length_turnup = ($area_parent * 1000) * ($LengthToWidthFactor / $width_turnup);

	let length_slab = ($wgt_slabbed / $wgt_turnup) * $length_turnup;

	let tot_lene = 0;
	foreach
	select distinct splices.ts_wound,(length_begin-length_end) lene
		from splices, invent
		where splices.parent_id = $unit_id
		and splices.unit_id = invent.unit_id;
	let tot_lene = $tot_lene + $lene;
	end foreach

	let length = $tot_lene + $length_slab;

	IF ($length < $length_turnup) THEN
		let length_turnup = $length_turnup;

	ELSE
		let length_turnup = $length;
	END IF
	LET area_parent = (($width_turnup / $LengthToWidthFactor) * $length_turnup) / 1000 ;

	select sum(percentage) tuslab_area
		from acs_genealogy
		where parent_id = $unit_id
		and type_code_src in ('U','S');

	select sum(percentage) tu_area
		from acs_genealogy
		where parent_id = $unit_id
		and type_code_src = 'U';

	let loss_perc = (100 - $tuslab_area) / 100;

	select count(*) spl_cnt_j
		from splices, invent
		where splices.parent_id = $unit_id
		and splices.unit_id = invent.unit_id;

	let tot_perc = 0;
	let row_cnt_j = 0;

	let tu_area = $tu_area / 100;

		foreach

			select splices.unit_id child_id,invent.type_code, splices.parent_id, splices.machine_type, splices.machine_id,stat,
				length_end, length_begin, width_begin, width_end
				from splices, invent
				where splices.parent_id = $unit_id
				and splices.unit_id = invent.unit_id;

			let length_child = $length_begin - $length_end;
			let row_cnt_j = $row_cnt_j + 1;
			let width_child = $width_end - $width_begin;
			LET area_child = (($width_child / $LengthToWidthFactor) * $length_child) / 1000 ;

			if ($area_parent <> 0) THEN
			let area_perc = $area_child / $area_parent;
			else
			let area_perc = 0;
			end if
			let area_perc = $area_perc:"##&.&####";

			IF ($row_cnt_j < $spl_cnt_j) THEN

				IF ($area_parent <> 0 and $tu_area <> 0) THEN
					let genealogy_perc = ((($area_perc ) * ($loss_perc / $tu_area)) * 100);
				ELSE
					let genealogy_perc = 0;
				END IF
					IF ($genealogy_perc < 0) THEN
						let genealogy_perc = 0;
					END IF
					let genealogy_perc = $genealogy_perc:"##&.&##";
					let tot_perc = $tot_perc + $genealogy_perc;
			ELSE
				let genealogy_perc = 100 - $total_percent;
				IF ($genealogy_perc < 0) THEN
					let genealogy_perc = 0;
				END IF
				let genealogy_perc = $genealogy_perc:"##&.&##";
			END IF
			let total_percent = $total_percent + $genealogy_perc;
			let area_net = $area_parent * ($genealogy_perc / 100);

			call InsertACSGenealogyPerc();

		end foreach
END SUBROUTINE

	INCLUDE "raw_matl_inv_update";
