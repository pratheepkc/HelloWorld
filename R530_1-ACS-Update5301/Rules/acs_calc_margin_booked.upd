define active_flag string;
define allowance_costs double;
define allowance_id string;
define amt_allowance double;
define amt_frgt double;
define amt_profit double;
define article_id string;
define blended_costs double;
define cartons_ord long;
define cartons_per_pallet long;
define cons_trans_mode string;
define cost_fixed double;
define cost_frgt_std double;
define cost_group_desc string;
define cost_group_id string;
define cost_lsu double;
define cost_per_ton double;
define cost_per_ton_sr double;
define cost_srd double;
define cost_recovery double;
define cost_variable double;
define cost_unit double;
define country_id string;
define customer_id string;
define deckle_max double;
define del_string string;
define dest_mill string;
define finish_mill_id string;
define finmatls_costs double;
define finmatls_total double;
define format string;
define format_price string;
define format_percent string;
define freight_costs double;
define gen_desc string;
define grade_spec string;
define grade_spec_in string;
define gs_in string;
define item_num long;
define key_value string;
define margin_contribution double;
define margin_file string;
define message_num long;
define message_text string;
define mill_curr string;
define MXLANG ENV;
define MXDATADIR ENV;
define new_success long;
define order_id string;
define pallet_spec_id string;
define percent1 double;
define percent_commission double;
define percent_of_price double;
define price double;
define price_per_ton double;
define price_per_ton_sr double;
define prod_route_id string;
define pr_success long;
define product_costs double;
define remaining_deckle double;
define remark string;
define revision_num long;
define rolls_ord long;
define seq_num long;
define siderun_costs double;
define sheets_ord long;
define sheets_per_pallet long;
define ship_from_whse string;
define ship_mill_id string;
define ship_to_cons string;
define SHOWSIDERUNCOSTS ENV;
define source_mill string;
define string_value string;
define table_name string;
define total_commission double;
define total_allowances double;
define tons_factor long;
define type_code string;
define type_code_group string;
define type_code_in string;
define today long;
define total_revenue double;
define USEMETRIC ENV;
define use_roll_bank_flag string;
define user_id string;
define USER ENV;
define wgt_ord long;
DEFINE cost_book_found STRING;
DEFINE cost_type_freight STRING;
DEFINE cost_type_finmatl STRING;
DEFINE length_lineal LONG;
DEFINE width_act DOUBLE;
DEFINE wgt_est DOUBLE;
DEFINE direct_flag  STRING;
DEFINE area_net DOUBLE;
DEFINE wgt_net DOUBLE;
DEFINE gsm_loss_factor DOUBLE;
DEFINE std_cost DOUBLE;
#   7
define cost_per_unit double;
define seconds_on_machine long;
#============================================================================
#  ACS MxUpdate Rules for to calculate the profit margin for an order item
#
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#   1    05/29/09   PKC     Calculate Profit Margin for an entire order or a
#                           specific order item.
#   2    06/01/09   PKC     Fixes and added acs_bk_ord_det
#   3    06/02/09   BRN     Use Loss Percent from the cost book to get the gross quantities
#   4    06/04/09   PKC	    Remove unused fields from acs_bk_ord_cost
#   5    11/04/09   PKC	    Use loss factor from prod_route_step instead of the cost book.
#   6    14/12/10   BRN     Add Define cost_per_unit 
#   7    14/12/10   BRN     Add By Time Unit of Measure in the std cost book
#   8    15/12/10   BRN     Fix loss calculation
#   9    15/12/10   PHH     Use FREIGHT_COST_TYPE_INT1 and FREIGHT_COST_TYPE_INT2 for intermediate freight
#============================================================================
#============================================================================
# ERROR RULE, DO EVERY TIME AN ERROR OCCURS
#============================================================================
NO * EXECUTE

	select * from acs_bk_ord_cost;
	select * from order_item;
	select * from acs_cost_bk_crit;
	select * from acs_cost_bk_mast;
	select * from acs_cost_bk_det;
	select * from prod_route_step;

MX * ER 
	echo "Rule error";

* * * AUTO acs_bk_ord_cost

	insert into acs_bk_ord_cost 
	(order_id, item_num, cost_group_id, cost_type_id,cost, ts_modified,
	 cost_book_uid, cost_book_id)
	values ($order_id, $item_num, $cost_group_id, $cost_type_id, 0, 0,
	 ' ', ' ');

* * * AUTO acs_bk_ord_det
	insert into acs_bk_ord_det
	(order_id, item_num, cost_group_id, cost_type_id, unit_meas,
	 mill_id, machine_type, machine_id, wgt_net, area_net, units_ord, seconds_on_machine,
	 cost_book_crit_uid, cost_book_uid, cost_book_id, cost_book_det_uid,
	 cost, cost_per_unit, ts_modified)
	values ($order_id, $item_num, $cost_group_id, $cost_type_id, $unit_meas,
	 $mill_id, $machine_type, $machine_id, 0, 0, 0, 0,
	 $cost_book_crit_uid, $cost_book_uid, $cost_book_id,$cost_book_det_uid,
	 0, 0, 0);

#
#============================================================================
# Start up rules.  Any variable which needs to be initialized ONLY once will
#	be done here.
#============================================================================
MX * ST 


      let total_allowances = 0;
      let total_commission = 0;
      let cost_variable = 0;
      let cost_fixed = 0;

#
#============================================================================
# COMMON RULE, DO EVERY TIME
#============================================================================
* * CALC   
		
	let ts_modified = {time};
	delete from acs_bk_ord_cost
	 where order_id = $order_id
	   and item_num = $item_num;
	Call CalcAllowances();
	Call DetermineStdCost();
	Call CalcFreightCost();
	Call CalcFinishMatlCost();

	select sum(cost) cost_variable
	  from acs_bk_ord_cost, acs_cost_type
	 where acs_cost_type.type_code='V'
	   and acs_bk_ord_cost.cost_group_id=acs_cost_type.cost_group_id
	   and acs_bk_ord_cost.cost_type_id = acs_cost_type.cost_type_id
	   and order_id = $order_id
	   and item_num = $item_num;

	select sum(cost) cost_fixed
	  from acs_bk_ord_cost, acs_cost_type
	 where acs_cost_type.type_code='F'
	   and acs_bk_ord_cost.cost_group_id=acs_cost_type.cost_group_id
	   and acs_bk_ord_cost.cost_type_id = acs_cost_type.cost_type_id
	   and order_id = $order_id
	   and item_num = $item_num;

# Calculate contribution margin

      let amt_contribution = $price - $total_allowances - $cost_variable;
      let perc_contribution = $amt_contribution / $price * 100;

      echo Profit Margin $perc_contribution price $price allowances $total_allowances variable costs $cost_variable;

# Calculate net margin

      let amt_profit = $price - $total_allowances - $cost_fixed - $cost_variable;
      let perc_profit = $amt_profit / $price * 100;

# Calculate contribution per hour
	select machine_id, mill_id, machine_type, wgt_sched
	  from order_item 
	 where order_id = $order_id
	   and item_num = $item_num;

	if ($machine_type = "PM") then

# Calculate contrib margin per hour only if sourced on PM
# calculate based on weight scheduled on PM
	echo calculation contribution per hour;
		select capacity_avg, capacity_target
	 	 from gs_machine
	 	where grade_spec = $grade_spec
	   	 and machine_type = 'PM'
	  	 and machine_id = $machine_id
	  	 and mill_id = $mill_id;

		If ($capacity_avg > 0) then
	   		LET pm_capacity_hr = $capacity_avg/24;
		else
			LET pm_capacity_hr = $capacity_target/24;
		end if
		LET total_hrs = $wgt_sched / $pm_capacity_hr;
		LET contribution_hr = $amt_contribution/$total_hrs;
		echo LET $total_hrs = $wgt_sched / $pm_capacity_hr;
		echo LET $contribution_hr = $amt_contribution/$total_hrs;

	else
      	let contribution_hr = 0;
	end if



SUBROUTINE CalcAllowances()

# Calculate the Sales Revenue of the order item

      select price
        from order_item
       where order_id = $order_id
         and item_num = $item_num;
      
	if $USEMETRIC = "Y" then
         let tons_factor = 1000;
	else
         let tons_factor = 2000;
	end if

# Calculate the allowances

      let key_value = $order_id, "-", $item_num:'&&';

	let total_allowances = 0;
      foreach
         select type_code, amt_allowance, percent1, allowance_id 
           from allowance_item
          where table_name = 'order_item'
            and key_value = $key_value
          order by allowance_id;
         echo key_value $key_value type_code $type_code amt_allowance $amt_allowance percent1 $percent1;

         select gen_desc, adj_indicator
           from allowance_id
          where allowance_id = $allowance_id;
         echo echo gen_desc $gen_desc type_code $type_code price $price;

         if $type_code = "P" then
            let amt_allowance = $price * $percent1 / 100;
            if $adj_indicator <> "-" then
               let amt_allowance = 0 - $amt_allowance;
            end if
         else
            let amt_allowance = 0 - $amt_allowance;
         end if

         let total_allowances = $total_allowances + $amt_allowance;
      end foreach

      let amt_allowance = $total_allowances;

END SUBROUTINE

SUBROUTINE CalcFreightCost()

# Calculate the freight costs for each order item - Check for all possible shipping points

      let freight_costs = 0;
      select wgt_ord, consignee_id, mill_id, finish_mill_id, 
             ship_mill_id, prod_route_id, grade_spec, type_code,
             width_ord
        from order_item
       where order_id = $order_id
         and item_num = $item_num;

      select use_roll_bank_flag
        from prod_route
       where prod_route_id = $prod_route_id
         and active_flag = 'Y';

      let pr_success = $success;

# Ship from mill to finish mill

      let amt_frgt = 0;
      if ($mill_id <> $finish_mill_id) then
         echo Calculating frieght costs to ship from $mill_id (mill) to $finish_mill_id (finish mill);
         let source_mill = $mill_id;
         let dest_mill = $finish_mill_id;
         call calc_std_frgt();
         let amt_frgt = $amt_frgt + $cost_frgt_std;
	echo FREIGHT_COST_TYPE_INT1  amt_frgt : $amt_frgt;
# Intermediate freight costs for order item
        let amt_frgt = $amt_frgt * ($wgt_ord / $tons_factor);
        let freight_costs = $amt_frgt;

	  select string_value cost_type_id
	    from constants
	    where key_value = 'FREIGHT_COST_TYPE_INT1';

	  select cost_group_id 
	    from acs_cost_type 
	    where cost_type_id = $cost_type_id;

	echo FREIGHT_COST_TYPE_INT1 : $freight_costs $amt_frgt; 

	  update acs_bk_ord_cost
	     set cost = cost + $freight_costs, 
	       ts_modified = $ts_modified
	  where order_id = $order_id
	    and item_num = $item_num
	    and cost_type_id = $cost_type_id
	    and cost_group_id = $cost_group_id;
      end if


# Ship from finish mill to ship mill

      let amt_frgt = 0;
      if ($finish_mill_id <> $ship_mill_id) then
         echo Calculating costs to ship from $finish_mill_id (finish mill) to $ship_mill_id (ship mill);
         let source_mill = $finish_mill_id;
         let dest_mill = $ship_mill_id;
         call calc_std_frgt();
         let amt_frgt = $amt_frgt + $cost_frgt_std;
	echo FREIGHT_COST_TYPE_INT2  amt_frgt : $amt_frgt;

# Intermediate freight costs for order item
        let amt_frgt = $amt_frgt * ($wgt_ord / $tons_factor);
       let freight_costs = $amt_frgt;

 	 select string_value cost_type_id
	   from constants
	  where key_value = 'FREIGHT_COST_TYPE_INT2';

	 select cost_group_id 
	   from acs_cost_type 
	  where cost_type_id = $cost_type_id;

	echo FREIGHT_COST_TYPE_INT2 : $freight_costs $amt_frgt; 

	 update acs_bk_ord_cost
	   set cost = cost + $freight_costs, 
	       ts_modified = $ts_modified
	 where order_id = $order_id
	   and item_num = $item_num
	   and cost_type_id = $cost_type_id
	   and cost_group_id = $cost_group_id;
      end if

# Ship from ship mill to consignee
      let amt_frgt = 0;
      echo Calculating costs to ship from $ship_mill_id (ship mill) to $consignee_id (consignee_id);
      let source_mill = $ship_mill_id;
      let dest_mill = " ";
      call calc_std_frgt();
      let amt_frgt = $amt_frgt + $cost_frgt_std;
	echo FREIGHT_COST_TYPE  amt_frgt : $amt_frgt;

# Total freight costs for order item
      let amt_frgt = $amt_frgt * ($wgt_ord / $tons_factor);
      let freight_costs = $amt_frgt;

	select string_value cost_type_id
	  from constants
	 where key_value = 'FREIGHT_COST_TYPE';

	select cost_group_id 
	  from acs_cost_type 
	 where cost_type_id = $cost_type_id;

	echo FREIGHT_COST_TYPE : $freight_costs $amt_frgt; 

	update acs_bk_ord_cost
	   set cost = cost + $freight_costs, 
	       ts_modified = $ts_modified
	 where order_id = $order_id
	   and item_num = $item_num
	   and cost_type_id = $cost_type_id
	   and cost_group_id = $cost_group_id;

END SUBROUTINE

SUBROUTINE CalcFinishMatlCost()

# Calculate the costs of the finishing materials

      let finmatls_total = 0;
      select item_num, pallet_spec_id, type_code, rolls_ord,
             cartons_ord, sheets_ord, article_id, revision_num, finish_mill_id
        from order_item
       where order_id = $order_id
         and item_num = $item_num;

      select sheets_per_pallet, cartons_per_pallet
        from pallet_spec
       where pallet_spec_id = $pallet_spec_id
         and type_code = $type_code;

# Start Rev 6 - comment out the old cost retrieving
#      select sum(cost_unit * quantity) cost_unit
#        from costs_finmatl_view
#       where article_id = $article_id
#         and revision_num = $revision_num
#         and mill_id = $finish_mill_id;

#      echo OrderID= $order_id ItemNum= $item_num Article= $article_id RevNum= $revision_num;
#      echo PalletSpec= $pallet_spec_id TypeCode= $type_code RollsOrd= $rolls_ord;

	select cost
		from article
		where article_id = $article_id
		and revision_num = $revision_num;
	let cost_unit = $cost;
# End Rev 6


      if ($type_code = "R") then
          let finmatls_costs = $cost_unit * $rolls_ord;
      end if

      if ($type_code = "C" and $cartons_per_pallet > 0) then
          let finmatls_costs = $cost_unit * $cartons_ord / $cartons_per_pallet;
      end if

      if ($type_code = "S" and $sheets_per_pallet > 0) then
          let finmatls_costs = $cost_unit * $sheets_ord / $sheets_per_pallet;
      end if
      let finmatls_total = $finmatls_total + $finmatls_costs;
      echo Finish Materials Costs $finmatls_costs cost_unit $cost_unit sheets $sheets_ord sheets_per_pallet $sheets_per_pallet;
	
	select string_value cost_type_id
	  from constants
	 where key_value = 'FINMATL_COST_TYPE';

	select cost_group_id 
	  from acs_cost_type 
	 where cost_type_id = $cost_type_id;

	update acs_bk_ord_cost
	   set cost = $finmatls_total, 
	       ts_modified = $ts_modified
	 where order_id = $order_id
	   and item_num = $item_num
	   and cost_type_id = $cost_type_id
	   and cost_group_id = $cost_group_id;


END SUBROUTINE

SUBROUTINE DetermineStdCost()


	select grade_spec, width_ord, length_ord, wgt_ord, type_code, prod_route_id, rolls_ord, sheets_ord, article_id
	  from order_item 
 	 where order_id= $order_id
	   and item_num = $item_num;

	LET width_act = $width_ord;
	LET length_lineal = $length_ord;
	LET wgt_est = $wgt_ord;
	if ($type_code = "R") then
	    LET units_ord = $rolls_ord;
	else
	    select sheets_per_pallet 
	      from pallet_spec
	     where pallet_spec_id = $pallet_spec_id;
	    LET units_ord = $sheets_ord/$sheets_per_pallet;
	end if

	select customer_id, ts_ord
	  from order_mast
	 where order_id = $order_id;
	LET ts_wound = $ts_ord;
	LET step_num=1;
	foreach 
# Loop from last step backwards.
		select mill_id, machine_type, machine_id, loss_factor prs_loss_factor
	  	  from prod_route_step
	 	 where prod_route_id = $prod_route_id
	 	 order by route_step_num DESC;

		LET direct_flag = "Y";

# get grade spec made and not final grade spec
		select grade_spec_made, misc_loss gsm_loss_factor, capacity_target
		  from gs_machine
		 where mill_id = $mill_id
		   and machine_type = $machine_type
		   and machine_id = $machine_id
		   and grade_spec = $grade_spec;

		select bsw_nominal, grade_id
		  from grade_spec
		 where grade_spec = $grade_spec_made;

		if ($gsm_loss_factor = 0) then
			LET loss_factor = $prs_loss_factor;
		else
		   	LET loss_factor = $gsm_loss_factor;
		end if

	echo grade_spec $grade_spec, MT $machine_type, prod_route_id $prod_route_id loss_factor $loss_factor;

		Call DetermineQuantities();
# 7: look for all unit of measure
		foreach select unit_meas
			from unit_measure
			where table_name = 'acs_cost_bk_crit';
			
			Call GetStdCostBook();
			Call UpdateStdCost();

		end foreach

		LET step_num = $step_num + 1;

	end foreach

END SUBROUTINE


SUBROUTINE DetermineQuantities()

	if ($step_num = 1) then
# assume no loss factors for last step.
		if ($USEMETRIC = "Y") then
# area in 1000 sq meters
			LET area_net = (($width_act/100) * $length_lineal)/1000;
		else
# area in 1000 sq feet
			LET area_net = (($width_act/12) * $length_lineal)/1000;
		end if
		LET wgt_net = $wgt_est/$tons_factor;
		echo 		LET wgt_net = $wgt_est/$tons_factor;
	else
# increase wgt and area by loss factor in each step
# rev 8.0 Fix loss factor calculation
#		LET area_net = $area_net * (1+$loss_factor/100);
#		LET wgt_net = $wgt_net * (1+$loss_factor/100);
		echo LET wgt_net = $wgt_net / (1-$loss_factor/100);
		LET area_net = $area_net / (1-$loss_factor/100);
		LET wgt_net = $wgt_net / (1-$loss_factor/100);
	end if

# 7 Calc time on machine
	if ($capacity_target = 0) then
		Let seconds_on_machine = 0;
	else
		Let seconds_on_machine = $wgt_net * ( 24*60*60 / $capacity_target) * $tons_factor;
	end if
	
END SUBROUTINE

SUBROUTINE UpdateStdCost()

	foreach
		select avg_cost_mton, avg_cost_sqm, avg_cost_unit, avg_cost_time, cost_book_det_uid, cost_group_id, 
			 cost_type_id, cost_book_det_uid
		  from acs_cost_bk_det
		 where cost_book_crit_uid = $cost_book_crit_uid;

# the actual unit of measure values need to be verified
		IF ($unit_meas = "AREA") then
		   LET std_cost = $avg_cost_sqm * $area_net;
		   LET cost_per_unit = $avg_cost_sqm;
			echo unit_meas $unit_meas $std_cost = $avg_cost_sqm * $area_net;
		end if
		IF ($unit_meas = "UNIT") then
		   LET std_cost = $units_ord * $avg_cost_unit;
		   LET cost_per_unit = $avg_cost_unit;
			echo unit_meas $unit_meas $std_cost = $units_ord * $avg_cost_unit;

		end if
		IF ($unit_meas = "WGT") then
		   LET std_cost = $avg_cost_mton * $wgt_net;
		   LET cost_per_unit = $avg_cost_mton;
		   echo unit_meas $unit_meas $std_cost = $avg_cost_mton * $wgt_net;
		end if
		IF ($unit_meas = "TIME") then
		   LET std_cost = $avg_cost_time * ($seconds_on_machine / 3600);
		   LET cost_per_unit = $avg_cost_time;
		   echo unit_meas $unit_meas $std_cost = $avg_cost_time * $seconds_on_machine;
		end if
     		select cost 
		    	  from acs_bk_ord_cost
		 where order_id = $order_id
		   and item_num = $item_num
		   and cost_group_id = $cost_group_id
		   and cost_type_id = $cost_type_id;
		echo current cost $cost for cost_group $cost_group_id $cost_type_id;
		
		update acs_bk_ord_cost
		   set cost = cost + $std_cost,
			 cost_book_id = $cost_book_id,
			 cost_book_uid = $cost_book_uid,
			 ts_modified = $ts_modified
		 where order_id = $order_id
		   and item_num = $item_num
		   and cost_group_id = $cost_group_id
		   and cost_type_id = $cost_type_id;

		update acs_bk_ord_det
		   set cost = $std_cost,
			 cost_per_unit = $cost_per_unit,
	             unit_meas = $unit_meas,
			 mill_id = $mill_id,
		   	 machine_type = $machine_type,
			 machine_id = $machine_id,
			 cost_group_id = $cost_group_id,
			 cost_type_id = $cost_type_id,
			 wgt_net = $wgt_net,
			 area_net = $area_net,
			 units_ord = $units_ord,
			 seconds_on_machine = $seconds_on_machine,
			 ts_modified = $ts_modified,
			 cost_book_id = $cost_book_id
		 where order_id= $order_id
		   and item_num = $item_num
		   and cost_book_uid = $cost_book_uid
	    	   and cost_book_crit_uid = $cost_book_crit_uid
		   and cost_book_det_uid = $cost_book_det_uid;
	
	end foreach
END SUBROUTINE

      INCLUDE "calc_std_frgt";
	INCLUDE "acs_std_cost_book"
