DEFINE curr_time long;
DEFINE start_prod_day long;
DEFINE end_prod_day long;
DEFINE timestamp long;
#  MxUpdate Rules for build_acs_summary.
#
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#   1.0  04/07/09   GVG      Initial release 
#   2.0  05/27/09   PKC	     Add order summary for acs_sum_ord_cost
#   3.0  06/02/09   PKC	     Use ProdMMM from acs_sum_unit as MMM for other summaries.
#   4.0  06/03/09   PKC	     Split unit std cost into separate loop.
#   5.0  06/04/09   PKC	     Remove usage of direct_flag from acs_sum_grade_spec, acs_sum_run and acs_sum_ord_cost
#   6.0  06/06/09   NJN      Include total_wgt in the acs_sum_unit updates
#   7.0  08/20/09   NJN      Changed prod_MMM to MMM_plan
#   8.0  11/12/09   BRN      Fix data not set in acs_sum_unit
#   9.0  11/16/09   BRN      Add the MMM_prod in the table acs_sum_unit
#  10.0  11/17/09   BRN      Add MMM_prod to the acs_sum_grade_spec table, MMM_plan to acs_sum_run
#  11.0  18/11/09   BRN      Remove MMM from the acs_sum_grade_spec table, Replace MMM with MMM_prod in acs_sum_run
#  12.0  30/11/09   BRN      Use start of prod day for the summary of the table acs_sum_grade_spec
#  13.0  12/10/09   GVG      Update summary tables before acs_sum_unit is updated, then recalculate for updated records
#==============================================================================================
# ERROR RULE, DO EVERY TIME AN ERROR OCCURS
#==============================================================================================
NO * EXECUTE
	select * from acs_unit_cost;
	select * from acs_sum_unit;
	select * from acs_sum_grade_spec;
	select * from acs_sum_run;
	select * from acs_sum_ord_cost;

MX * ER 
	echo "Rule error";
#
#============================================================================
# Start up rules.  Any variable which needs to be initialized ONLY once will
#	be done here.
#============================================================================
* * * AUTO acs_sum_unit

	insert into acs_sum_unit (mill_id, machine_type, machine_id, unit_id, stat, type_code, direct_flag, 
		grade_spec, grade_id, run_num, closure_flag, ts_turned_up, cost_group_id, cost_type_id, 
		std_cost, act_cost, num_units, quantity, unit_meas, currency_id, complete_flag,
		total_wgt, mill_id_plan, mach_type_plan, mach_id_plan, ts_modified, order_id, item_num,
		prod_mill_id, prod_mach_type, prod_mach_id)
	values ($mill_id, $machine_type, $machine_id, $unit_id, $stat, $type_code, $direct_flag, 
		$grade_spec, $grade_id, $run_num, $closure_flag, $ts_turned_up, $cost_group_id, $cost_type_id, 
		0, 0, 0, 0, $unit_meas, $currency_id, '',$total_wgt, $mill_id_plan, $mach_type_plan,
		$mach_id_plan, $curr_time, $order_id, $item_num,
		$prod_mill_id, $prod_mach_type, $prod_mach_id);

* * * AUTO acs_sum_grade_spec

	insert into acs_sum_grade_spec (prod_mill_id, prod_mach_type, prod_mach_id, grade_spec, stat, 
		closure_flag, prod_date, cost_group_id, cost_type_id, std_cost, act_cost, num_units, 
		quantity, unit_meas, currency_id, ts_modified,total_wgt)
	values ($prod_mill_id, $prod_mach_type, $prod_mach_id, $grade_spec, $stat,
		$closure_flag, $start_prod_day, $cost_group_id, $cost_type_id, $std_cost,$act_cost,$num_units,
		 $quantity, $unit_meas, $currency_id,$curr_time, $total_wgt);

* * * AUTO acs_sum_run

	insert into acs_sum_run (prod_mill_id, prod_mach_type, prod_mach_id, mill_id_plan, mach_type_plan, mach_id_plan, run_num, stat, type_code, 
		closure_flag, grade_spec, grade_id, ts_begin, ts_end, cost_group_id, cost_type_id, std_cost, 
		act_cost, num_units, quantity, unit_meas, currency_id, complete_flag, total_wgt, ts_modified)
	values ($prod_mill_id, $prod_mach_type, $prod_mach_id, $mill_id_plan, $mach_type_plan, $mach_id_plan, $run_num, $stat, $type_code, 
		$closure_flag, $grade_spec, $grade_id, $ts_begin, $ts_end, $cost_group_id, $cost_type_id, 0,
		0, 0, 0, $unit_meas, $currency_id, '', 0, $curr_time);

* * * AUTO acs_sum_ord_cost

	insert into acs_sum_ord_cost(order_id, item_num, mill_id, machine_type, machine_id, grade_spec, 
		closure_flag, cost_group_id, cost_type_id, std_cost, act_cost, num_units, 
		quantity, unit_meas, currency_id, ts_modified,total_wgt)
	values ($order_id, $item_num, $mill_id_plan,$mach_type_plan,$mach_id_plan, $grade_spec, $closure_flag,
		$cost_group_id, $cost_type_id, 0, 0, 0, 0, $unit_meas, $currency_id,$curr_time, 0);


MX * ST 

	let curr_time = {time};
	let sum_unit_mod = 0;

	select max(ts_modified) sum_unit_mod
		from acs_sum_unit;

# Build Unit Summary from actual

	foreach

		select unit_id, type_code,sum(act_cost) act_cost, sum(quantity) quantity,  
			direct_flag, mill_id, machine_type, machine_id, unit_meas, 
			currency_id, cost_group_id, cost_type_id
			from acs_unit_cost
			where (ts_modified >= $sum_unit_mod or ts_create >= $sum_unit_mod)
			group by unit_id, type_code, direct_flag, mill_id, machine_type,
			machine_id, unit_meas, currency_id, cost_group_id, cost_type_id;

		select ts_transaction ts_turned_up, wgt_net total_wgt, mill_id_plan, 
			mach_id_plan, mach_type_plan, run_num,
			mill_id as prod_mill_id, machine_type as prod_mach_type, machine_id as prod_mach_id
			from acs_unit_route
			where unit_id = $unit_id
			and type_code = $type_code
			and mx_action_code in ('TURNUP','PALLETIZE');

		IF ($type_code = "J") THEN
			select stat, grade_spec
				from jumbo
				where jumbo_id = $unit_id;

			let order_id = "";
			let item_num = 0;
		ELSE
			select stat, grade_spec, order_id, item_num
				from invent
				where unit_id = $unit_id;
		END IF

		select grade_id
			from grade_spec
			where grade_spec = $grade_spec;

		select closure_flag
			from acs_cost_closure
			where unit_id = $unit_id
			and type_code = $type_code;
#13 update summary tables
		call upd_summaries();

		update acs_sum_unit
			set act_cost = $act_cost,
			num_units = 1,
			quantity = $quantity,
			total_wgt = $total_wgt,
			ts_turned_up = $ts_turned_up,
			ts_modified = $curr_time,
			prod_mill_id = $prod_mill_id,
			prod_mach_type = $prod_mach_type,
			prod_mach_id = $prod_mach_id,
			mill_id_plan = $mill_id_plan,
			mach_type_plan = $mach_type_plan,
			mach_id_plan = $mach_id_plan,
			run_num = $run_num
			where mill_id = $mill_id
			and machine_type = $machine_type
			and machine_id = $machine_id
			and unit_id = $unit_id
			and type_code = $type_code
			and direct_flag = $direct_flag
			and stat = $stat
			and cost_group_id = $cost_group_id
			and cost_type_id= $cost_type_id;

	end foreach

# Build unit std cost summary from standard

	foreach

		select unit_id, type_code,sum(std_cost) std_cost, 
			direct_flag, mill_id, machine_type, machine_id, 
			currency_id, cost_group_id, cost_type_id
			from acs_unit_cost_std
			where (ts_modified >= $sum_unit_mod or ts_create >= $sum_unit_mod)
			group by unit_id, type_code, direct_flag, mill_id, machine_type,
			machine_id, currency_id, cost_group_id, cost_type_id;
		echo  calculating std unit cost for unit $unit_id;

		select ts_transaction ts_turned_up, wgt_net total_wgt, mill_id_plan, 
			mach_id_plan, mach_type_plan, run_num,
			mill_id as prod_mill_id, machine_type as prod_mach_type, machine_id as prod_mach_id
			from acs_unit_route
			where unit_id = $unit_id
			and type_code = $type_code
			and mx_action_code in ('TURNUP','PALLETIZE');

		IF ($type_code = "J") THEN
			select stat, grade_spec
				from jumbo
				where jumbo_id = $unit_id;

			let order_id = "";
			let item_num = 0;
		ELSE
			select stat, grade_spec, order_id, item_num
				from invent
				where unit_id = $unit_id;
		END IF

		select grade_id
			from grade_spec
			where grade_spec = $grade_spec;

		select closure_flag
			from acs_cost_closure
			where unit_id = $unit_id;

# Fields for the groupping ... since there is not "stat" for the std cost
		let stat = "G";
#13
		call upd_summaries();

		update acs_sum_unit
			set std_cost = $std_cost,
			ts_modified = $curr_time,
			prod_mill_id = $prod_mill_id,
			prod_mach_type = $prod_mach_type,
			prod_mach_id = $prod_mach_id,
			mill_id_plan = $mill_id_plan,
			mach_type_plan = $mach_type_plan,
			mach_id_plan = $mach_id_plan,
			run_num = $run_num
			where mill_id = $mill_id
			and machine_type = $machine_type
			and machine_id = $machine_id
			and unit_id = $unit_id
			and type_code = $type_code
			and direct_flag = $direct_flag
			and stat = $stat
			and cost_group_id = $cost_group_id
			and cost_type_id= $cost_type_id;

	end foreach

#13	select max(ts_modified) gs_mod
#13		from acs_sum_grade_spec;

# Build Grade Spec Summary

	foreach
#13
		select prod_mill_id, prod_mach_id, prod_mach_type, grade_spec, stat, 
			cost_group_id, cost_type_id, closure_flag, prod_date
			from acs_sum_grade_spec
			where ts_modified = 0;
#13
#13		select prod_mill_id, prod_mach_id, prod_mach_type, stat, type_code, closure_flag, 
#13			cost_group_id, cost_type_id, ts_turned_up, unit_meas, currency_id, grade_spec
#13			from acs_sum_unit
#13			where ts_modified >= $gs_mod;

#13		let timestamp = $ts_turned_up;
		let timestamp = $prod_date;

		let start_prod_day = {start of prod day};

		let end_prod_day = $start_prod_day + 86399;

		select type_code, ts_turned_up, unit_meas, currency_id
			from acs_sum_unit
			where prod_mill_id = $prod_mill_id
			and prod_mach_id = $prod_mach_id
			and prod_mach_type = $prod_mach_type
			and stat = $stat
			and grade_spec = $grade_spec
			and cost_group_id = $cost_group_id
			and cost_type_id = $cost_type_id
			and closure_flag = $closure_flag
			and ts_turned_up >= $start_prod_day
			and ts_turned_up <=$end_prod_day;

		select sum(std_cost) std_cost, sum(act_cost) act_cost, sum(quantity) quantity,
			sum(num_units) num_units
			from acs_sum_unit
			where prod_mill_id = $prod_mill_id
			and prod_mach_id = $prod_mach_id
			and prod_mach_type = $prod_mach_type
			and grade_spec = $grade_spec
			and stat = $stat
			and cost_group_id = $cost_group_id
			and cost_type_id = $cost_type_id
			and closure_flag = $closure_flag
			and ts_turned_up >= $start_prod_day
			and ts_turned_up <= $end_prod_day;
		
		let total_wgt = 0;
		foreach

			select distinct unit_id, total_wgt unit_wgt
				from acs_sum_unit
				where prod_mill_id = $prod_mill_id
				and prod_mach_id = $prod_mach_id
				and prod_mach_type = $prod_mach_type
				and grade_spec = $grade_spec
				and stat = $stat
				and closure_flag = $closure_flag
				and ts_turned_up >= $start_prod_day
				and ts_turned_up <= $end_prod_day;

			let total_wgt = $total_wgt + $unit_wgt;
		end foreach

		update acs_sum_grade_spec
			set std_cost = $std_cost,
			act_cost = $act_cost,
			num_units = $num_units,
			quantity = $quantity,
			ts_modified = $curr_time,
			total_wgt = $total_wgt,
			unit_meas = $unit_meas,
			currency_id = $currency_id
			where prod_mill_id = $prod_mill_id
			and prod_mach_id = $prod_mach_id
			and prod_mach_type = $prod_mach_type
			and grade_spec = $grade_spec
			and stat = $stat
			and cost_group_id = $cost_group_id
			and cost_type_id = $cost_type_id
			and closure_flag = $closure_flag
			and prod_date = $start_prod_day;

	end foreach

# Build Run Summary

#13	select max(ts_modified) run_mod
#13		from acs_sum_run;

	foreach
#13
		select mill_id_plan, mach_id_plan, mach_type_plan, run_num, prod_mill_id,
			prod_mach_id, prod_mach_type, stat, type_code, cost_group_id, cost_type_id, closure_flag
			from acs_sum_run
			where ts_modified = 0;

#13		select prod_mill_id, prod_mach_type, prod_mach_id, mill_id_plan, mach_type_plan, mach_id_plan, run_num, stat, type_code, 
#13			closure_flag, cost_group_id, cost_type_id, 
#13			unit_meas, currency_id, grade_spec, grade_id
#13			from acs_sum_unit
#13			where ts_modified >= $run_mod;

		select unit_meas, currency_id, grade_spec, grade_id
			from acs_sum_unit
			where mill_id_plan = $mill_id_plan
			and mach_id_plan = $mach_id_plan
			and mach_type_plan = $mach_type_plan
			and run_num = $run_num
			and prod_mill_id = $prod_mill_id
			and prod_mach_id = $prod_mach_id
			and prod_mach_type = $prod_mach_type
			and stat = $stat
			and type_code = $type_code
			and cost_group_id = $cost_group_id
			and cost_type_id = $cost_type_id
			and closure_flag = $closure_flag;

		select sum(std_cost) std_cost, sum(act_cost) act_cost, sum(quantity) quantity,
			sum(num_units) num_units
			from acs_sum_unit
			where mill_id_plan = $mill_id_plan
			and mach_id_plan = $mach_id_plan
			and mach_type_plan = $mach_type_plan
			and run_num = $run_num
			and prod_mill_id = $prod_mill_id
			and prod_mach_id = $prod_mach_id
			and prod_mach_type = $prod_mach_type
			and stat = $stat
			and type_code = $type_code
			and cost_group_id = $cost_group_id
			and cost_type_id = $cost_type_id
			and closure_flag = $closure_flag;

		let total_wgt = 0;
		foreach

			select distinct unit_id, total_wgt unit_wgt
				from acs_sum_unit
				where mill_id_plan = $mill_id_plan
				and mach_id_plan = $mach_id_plan
				and mach_type_plan = $mach_type_plan
				and run_num = $run_num
				and prod_mill_id = $prod_mill_id
				and prod_mach_id = $prod_mach_id
				and prod_mach_type = $prod_mach_type
				and stat = $stat
				and type_code = $type_code
				and closure_flag = $closure_flag;

			let total_wgt = $total_wgt + $unit_wgt;
		end foreach

		select min(ts_create) ts_begin, max(ts_create) ts_end
			from acs_unit_route
			where run_num = $run_num
			and mill_id_plan = $mill_id_plan
			and mach_type_plan = $mach_type_plan
			and mach_id_plan = $mach_id_plan
			and mx_action_code in ('TURNUP','PALLETIZE');

		update acs_sum_run
			set std_cost = $std_cost,
			act_cost = $act_cost,
			quantity = $quantity,
			num_units = $num_units,
			ts_begin = $ts_begin,
			ts_end = $ts_end,
			total_wgt = $total_wgt,
			ts_modified = $curr_time
			where mill_id_plan = $mill_id_plan
			and mach_id_plan = $mach_id_plan
			and mach_type_plan = $mach_type_plan
			and run_num = $run_num
			and prod_mill_id = $prod_mill_id
			and prod_mach_id = $prod_mach_id
			and prod_mach_type = $prod_mach_type
			and stat = $stat
			and type_code = $type_code
			and cost_group_id = $cost_group_id
			and cost_type_id = $cost_type_id
			and closure_flag = $closure_flag;

	end foreach

# Build Order Cost Summary

#13	select max(ts_modified) ord_mod
#13		from acs_sum_ord_cost;

	foreach

		select mill_id mill_id_plan,machine_type mach_type_plan, machine_id mach_id_plan,
			closure_flag,cost_group_id,cost_type_id,order_id,item_num
			from acs_sum_ord_cost
			where ts_modified = 0;

#13		select distinct mill_id_plan, mach_id_plan, mach_type_plan, closure_flag, 
#13			cost_group_id, cost_type_id, order_id, item_num, grade_spec, unit_meas, currency_id

		select grade_spec, unit_meas, currency_id
			from acs_sum_unit
			where mill_id_plan = $mill_id_plan
			and mach_type_plan = $mach_type_plan
			and mach_id_plan = $mach_id_plan
			and closure_flag = $closure_flag
			and cost_group_id = $cost_group_id
			and cost_type_id = $cost_type_id
			and order_id = $order_id
			and item_num = $item_num;
#13			where ts_modified >= $ord_mod;
		echo Order Summary for order_id $order_id $item_num;

		select sum(std_cost) std_cost, sum(act_cost) act_cost, sum(quantity) quantity,
			sum(num_units) num_units
			from acs_sum_unit
			where mill_id_plan = $mill_id_plan
			and mach_id_plan = $mach_id_plan
			and mach_type_plan = $mach_type_plan
			and closure_flag = $closure_flag
			and cost_group_id = $cost_group_id
			and cost_type_id = $cost_type_id
			and order_id = $order_id
			and item_num = $item_num;

		let total_wgt = 0;
		foreach
		select distinct unit_id, total_wgt unit_wgt
			from acs_sum_unit
			where mill_id_plan = $mill_id_plan
			and mach_id_plan = $mach_id_plan
			and mach_type_plan = $mach_type_plan
			and closure_flag = $closure_flag
			and order_id = $order_id
			and item_num = $item_num;

		let total_wgt = $total_wgt + $unit_wgt;
		end foreach
		
		update acs_sum_ord_cost
			set std_cost = $std_cost,
			act_cost = $act_cost,
			num_units = $num_units,
			quantity = $quantity,
			ts_modified = $curr_time,
			total_wgt = $total_wgt,
			grade_spec = $grade_spec,
			unit_meas = $unit_meas,
			currency_id = $currency_id
			where mill_id = $mill_id_plan
			and machine_type = $mach_type_plan
			and machine_id = $mach_id_plan
			and closure_flag = $closure_flag
			and cost_group_id = $cost_group_id
			and cost_type_id = $cost_type_id
			and order_id = $order_id
			and item_num = $item_num;

	end foreach

	echo "COMPLETED";

SUBROUTINE upd_summaries()

	let timestamp = $ts_turned_up;
	let start_prod_day = {start of prod day};

	update acs_sum_grade_spec
		set ts_modified = 0
		where prod_mill_id = $prod_mill_id
		and prod_mach_id = $prod_mach_id
		and prod_mach_type = $prod_mach_type
		and grade_spec = $grade_spec
		and stat = $stat
		and cost_group_id = $cost_group_id
		and cost_type_id = $cost_type_id
		and closure_flag = $closure_flag
		and prod_date = $start_prod_day;

	update acs_sum_run
		set ts_modified = 0
		where mill_id_plan = $mill_id_plan
		and mach_id_plan = $mach_id_plan
		and mach_type_plan = $mach_type_plan
		and run_num = $run_num
		and prod_mill_id = $prod_mill_id
		and prod_mach_id = $prod_mach_id
		and prod_mach_type = $prod_mach_type
		and stat = $stat
		and type_code = $type_code
		and cost_group_id = $cost_group_id
		and cost_type_id = $cost_type_id
		and closure_flag = $closure_flag;

	update acs_sum_ord_cost
		set ts_modified = 0
		where mill_id = $mill_id_plan
		and machine_type = $mach_type_plan
		and machine_id = $mach_id_plan
		and closure_flag = $closure_flag
		and cost_group_id = $cost_group_id
		and cost_type_id = $cost_type_id
		and order_id = $order_id
		and item_num = $item_num;


		
END SUBROUTINE