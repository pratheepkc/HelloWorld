#============================================================================
# MxUpdate Rules to build std unit costs for ACS
#
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#  1.0   04/20/09   PKC     Initial release
#  2.0   11/04/09   PKC     Use loss_factor from prod_route_step instead of cost book
#  3.0   11/19/09   PKC     Calculate std cost for inprocess units and jumbos
#  4.0   11/20/09   PKC     Fix "in process" logic
#  5.0   11/24/10   BRN     Delete the std costs for a unit before recreating them
#  6.0   14/12/10   BRN     Add By Time Unit of Measure in the std cost book
#  7.0   15/12/10   BRN	    Get the grade_spec for the jumbo case	
#  8.0   15/12/10   BRN     Fix loss calculation
#  9.0   15/12/10   BRN     Include finishing costs
#============================================================================
#
#
#
DEFINE USEMETRIC ENV;
DEFINE cost_book_found STRING;
DEFINE step_num LONG;
DEFINE inproc_unit STRING;
#   6.0
define cost_per_unit double;
define seconds_on_machine long;


NO * EXECUTE
	select * from acs_cost_bk_mast;
	select * from acs_cost_bk_crit;
	select * from acs_cost_bk_det;
	select * from invent;
	select * from acs_cost_trans_log;
	select * from gs_machine;
	select * from grade_spec;
	select * from acs_unit_cost_std;

* * ST 

	let type = "ONCE";

	select string_value currency_id
	  from constants
	 where key_value = 'MILL_CURRENCY';

	select decimal_value tons_factor
	  from constants
	 where key_value = 'tons_factor';

	LET ts_create = {time};
	LET ts_modified = $ts_create;
	

	foreach
		select unit_id, stat, type_code
		  from acs_cost_trans_log
		where stat_std = 'N';

# Rev 5.0 Reset the std cost for the selected unit
		delete from acs_unit_cost_std
			where unit_id = $unit_id and type_code = $type_code;


################# Get the Finishing Costs
		if ($type_code <> "J") then
			select article_id, revision_num, customer_id
				from invent
				where unit_id = $unit_id;

			select cost std_cost
				from article
				where article_id = $article_id
				and revision_num = $revision_num;

			select string_value cost_type_id
	  			from constants
	 			where key_value = 'FINMATL_COST_TYPE';

			select cost_group_id 
	  			from acs_cost_type 
	 			where cost_type_id = $cost_type_id;

			select mill_id, machine_type, machine_id
			  from acs_unit_route_std
			 where unit_id = $unit_id
		         and parent_id = $unit_id
			   and machine_type in ('WR','PS');

			select wgt_net, area_net
				from acs_unit_route
			     where mx_action_code in ('PALLETIZE','TURNUP')
				 and unit_id = $unit_id;
			    LET wgt_net = $wgt_net / $tons_factor;

		   insert into acs_unit_cost_std 
			(unit_id, mill_id, machine_type, machine_id, cost_group_id, cost_type_id, direct_flag, std_cost,
			 type_code, currency_id, customer_id, cost_book_crit_uid, cost_book_id, cost_book_uid, cost_book_det_uid,
			 wgt_net, area_net,seconds_on_machine,ts_create, ts_modified)
		   values ($unit_id, $mill_id, $machine_type, $machine_id, $cost_group_id, $cost_type_id, 'Y', $std_cost,
			 $type_code, $currency_id, $customer_id, ' ', ' ', ' ', ' ',
			 $wgt_net, $area_net,0,$ts_create, $ts_modified);

		end if

################# Get the Cost Book Costs

		echo Processing $unit_id for std costs;
		LET step_num = 1;
		foreach

# select only current steps and not the parent steps. Loop from last step backwards.

			select mill_id, machine_type, machine_id, direct_flag, prod_route_id
			  from acs_unit_route_std
			 where unit_id = $unit_id
		         and parent_id = $unit_id
			 order by route_step_num DESC;

			echo $mill_id, $machine_type, $machine_id, $type_code;
			LET inproc_unit = "Y";

# for inprocess units and jumbos get the wgt and area from acs_unit_route. IF FG inventory, then calculate from invent.
			if ($type_code <> "J") then
			    select grade_spec, width_act, ts_wound, length_lineal, wgt_est, 
				     customer_id, class
			      from invent 
			    where unit_id = $unit_id;
			    if ($class <> "W" and $class <> "U") then
				  LET inproc_unit = "Y";
			    else 
				  LET inproc_unit = "N";
			    end if
			else
# Rev 7.0
				select grade_spec
			      	from jumbo 
			   		where jumbo_id = $unit_id;
			end if
			if ($inproc_unit = "Y") then
			    select wgt_net, area_net, ts_transaction ts_wound 
				from acs_unit_route
			     where mx_action_code in ('PALLETIZE','TURNUP')
				 and unit_id = $unit_id;
			    LET wgt_net = $wgt_net / $tons_factor;
			end if

# get grade spec made and not final grade spec
			select grade_spec_made, misc_loss gsm_loss_factor, capacity_target
			  from gs_machine
			 where mill_id = $mill_id
			   and machine_type = $machine_type
			   and machine_id = $machine_id
			   and grade_spec = $grade_spec;

			select bsw_nominal, grade_id
			  from grade_spec
			 where grade_spec = $grade_spec_made;

			select loss_factor prs_loss_factor
	  	  	  from prod_route_step
	 	 	 where prod_route_id = $prod_route_id
			   and mill_id = $mill_id
			   and machine_type = $machine_type
			   and machine_id = $machine_id;

			if ($gsm_loss_factor = 0) then
				LET loss_factor = $prs_loss_factor;
			else
				LET loss_factor = $gsm_loss_factor;
			end if
			echo 1 ==> loss_factor $loss_factor;
			
			Call DetermineQuantities();

# 6.0: look for all unit of measure
			foreach select unit_meas
				from unit_measure
				where table_name = 'acs_cost_bk_crit';

				Call GetStdCostBook();
				echo Updating Std Cost for $unit_id;
				Call UpdateStdCost();

			end foreach

			LET step_num = $step_num + 1;

		end foreach

		update acs_cost_trans_log
		   set stat_std = 'P'
		 where unit_id = $unit_id;


	end foreach


SUBROUTINE DetermineQuantities()

	if ($step_num = 1 and $type_code <> "J") then
# assume no loss factors for last step.
		if ($USEMETRIC = Y) then
# area in 1000 sq meters
			LET area_net = (($width_act/100) * $length_lineal)/1000;
		else
# area in 1000 sq feet
			LET area_net = (($width_act/12) * $length_lineal)/1000;
		end if
		LET wgt_net = $wgt_est/$tons_factor;
	else
# increase wgt and area by loss factor in each step
# rev 8.0 Fix loss factor calculation
#		LET area_net = $area_net * (1+$loss_factor/100);
#		LET wgt_net = $wgt_net * (1+$loss_factor/100);
		echo LET wgt_net = $wgt_net / (1-$loss_factor/100);
		LET area_net = $area_net / (1-$loss_factor/100);
		LET wgt_net = $wgt_net / (1-$loss_factor/100);
	end if

# 6.0 Calc time on machine
	if ($capacity_target = 0) then
		Let seconds_on_machine = 0;
	else
		Let seconds_on_machine = $wgt_net * ( 24*60*60 / $capacity_target) * $tons_factor;
	end if

	
END SUBROUTINE

SUBROUTINE UpdateStdCost()

	foreach
		select avg_cost_mton, avg_cost_sqm, avg_cost_unit, avg_cost_time, cost_book_det_uid, cost_group_id, 
			 cost_type_id, cost_book_det_uid
		  from acs_cost_bk_det
		 where cost_book_crit_uid = $cost_book_crit_uid;

# the actual unit of measure values need to be verified
		IF ($unit_meas = "AREA") then
		   LET std_cost = $avg_cost_sqm * $area_net;
			echo $std_cost = $avg_cost_sqm * $area_net;
		end if
		IF ($unit_meas = "UNIT") then
		   LET std_cost = $avg_cost_unit;
			echo $std_cost = $avg_cost_unit;

		end if
		IF ($unit_meas = "WGT") then
		   LET std_cost = $avg_cost_mton * $wgt_net;
		   echo $std_cost = $avg_cost_mton * $wgt_net;
		end if
		IF ($unit_meas = "TIME") then
		   LET std_cost = $avg_cost_time * ($seconds_on_machine / 3600);
		   LET cost_per_unit = $avg_cost_time;
		   echo unit_meas $unit_meas $std_cost = $avg_cost_time * $seconds_on_machine;
		end if

		
		select std_cost std_cost_tmp
		  from acs_unit_cost_std
		 where unit_id = $unit_id
		   and machine_type = $machine_type
		   and machine_id = $machine_id
		   and mill_id = $mill_id
		   and cost_group_id = $cost_group_id
		   and cost_type_id = $cost_type_id
		   and direct_flag = $direct_flag;

		if ($success = TRUE) then

 		update acs_unit_cost_std
		   set std_cost = $std_cost, wgt_net = $wgt_net, area_net = $area_net, seconds_on_machine = $seconds_on_machine,
		       cost_book_crit_uid = $cost_book_crit_uid,
			 cost_book_id = $cost_book_id,
			 cost_book_uid = $cost_book_uid,
			 cost_book_det_uid = $cost_book_det_uid,
			 ts_modified = $ts_modified
		 where unit_id = $unit_id
		   and machine_type = $machine_type
		   and machine_id = $machine_id
		   and mill_id = $mill_id
		   and cost_group_id = $cost_group_id
		   and cost_type_id = $cost_type_id
		   and direct_flag = $direct_flag;

		else
		   insert into acs_unit_cost_std 
			(unit_id, mill_id, machine_type, machine_id, cost_group_id, cost_type_id, direct_flag, std_cost,
			 type_code, currency_id, customer_id, cost_book_crit_uid, cost_book_id, cost_book_uid, cost_book_det_uid,
			 wgt_net, area_net,seconds_on_machine,ts_create, ts_modified)
		   values ($unit_id, $mill_id, $machine_type, $machine_id, $cost_group_id, $cost_type_id, $direct_flag, $std_cost,
			 $type_code, $currency_id, $customer_id, $cost_book_crit_uid, $cost_book_id, $cost_book_uid, $cost_book_det_uid,
			 $wgt_net, $area_net,$seconds_on_machine,$ts_create, $ts_modified);
		end if
	
	end foreach
END SUBROUTINE

	INCLUDE "acs_std_cost_book"
