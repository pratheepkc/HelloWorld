#============================================================================
# MxUpdate rules for acs_log_jumbo
#
# This file describes all the background processing, for filling the ACS data,
#     necessary using MxUpdate
#	whenever a Jumbo is processed.  Typically the actions performed on
#	a Jumbo are Turnup, Unturnup, Consume, and Modification.  The results
#	of these actions are:
#
# TURNUP:	Production (Units and Weight) and Run Time are updated.
# UNTURNUP:	Production and Run Time are backed out.
# MODIFY:	Production (units and Weight) is adjusted.
# SLABOFF:	Some of the paper in the Jumbo is discarded.
# CONSUME:	Paper Remaining in the Jumbo is recorded as LengthLoss.
# 
#
#  REV     DATE     WHO      DESCRIPTION
# -----  --------  -----    ------------------------------------------------
#  1.0   08/12/08   BRN     Initial release
#  2.0   15/01/08	  PKC	    Add calls to calculate geneology
#  3.0   23/01/09   GVG     Added call to delete genealogy on unconsume
#  4.0   27/01/09   GVG     Insert into acs_cost_trans_log on consume and unconsume
#  5.0   30/01/09   NJN     Added calls to Standard Consumption
#  6.0   04/06/09   GVG     If jumbo is consumed without turning up any children, create slaboff acs_genealogy record for entire consumption
#  7.0   04/15/09   PKC	    Added new calls for Unit Route Std
#  8.0   04/20/09   PKC	    Added delete of std route on unturnup
#  9.0   04/22/09   BRN	    Change to support update of Std RM consumptions
#  10.0  05/25/09   BRN	    Add mx_station to be processed (similar to log_jumbo)
#  11.0  07/22/09   BRN	    Add define of raw_matl_invent
#  12.0  08/14/09   BRN	    Replace MMMprod with MMMplan for acs_unit_route, acs_cost
#  13.0  08/28/09   NJN     RealTimeCons calls
#  14.0  11/10/09   BRN     Fix unit_id init for acs_cost_trans_log insert
#  15.0  20/10/09   BRN     Set reject_id for genealogy percentage purpose
#  16.0  11/16/09   PKC     Reactivate inserts into std route
#  17.0  01/11/10   BRN     Replace FMM with FIBERMGT
#  18.0  23-Mar-10  BRN     Implement the AvgCostPerTon
#  19.0  24-Mar-10  PHH     add select * from acs_product_mill_a; in NO * EXECUTE
#  20.0  01/11/10   BRN     Initiate timestamp in  * * * 
#=============================================================================================
DEFINE USEMETRIC ENV;
DEFINE CORPMILL ENV;
DEFINE FIBERMGT env;
DEFINE tmp_qty decimal;
DEFINE tmp_cost decimal;
DEFINE TonsFactor 	long;
DEFINE AVG_COST_USED ENV ;
#============================================================================
# ERROR RULE, DO EVERY TIME AN ERROR OCCURS
#============================================================================
MX * ER 
	echo "Rule error";
#
NO * EXECUTE
#       This rule is here so MxUpdate see's the types of the
#       fields being inserted. It will never be executed.
	select * from jumbo;
      select * from acs_unit_route;
	select * acs_log_jumbo;
	select * acs_log_jumbo_hist;
	select * from acs_cost_trans_log;
	select * from acs_unit_route_std;
	select * from acs_cost;
	select * from raw_matl_invent;
	select * from raw_matl_trans;
	select * from acs_product_mill_a;

#============================================================================
# Start up rules.  Any variable which needs to be initialized ONLY once will
#	be done here.
#============================================================================
MX * ST 
	echo "MxUpdate Started for acs_log_jumbo";
#
#============================================================================
# COMMON RULE, DO EVERY TIME
#============================================================================
* * *

# 20
	let timestamp = 0;

	if  ($USEMETRIC = "Y") then
		let LengthToWidthFactor = 100;
	      let TonsFactor = 1000;
	else
		let LengthToWidthFactor = 12;
	      let TonsFactor = 2000;
	end if

	if ($mx_station_id <> "MX") then
		echo $mx_station, $mx_action_code, $mx_station_id;
	end if

# Save the processed record into the history when it has been used.
	if ($mx_action_code = "TURNUP")
	or ($mx_action_code = "UNTURNUP")
	or ($mx_action_code = "MODAFTER")
	or ($mx_action_code = "CONSUME")
		then
		call ACSInsertLogJumboHist();	
	end if

	let acs_type_code = "J";
#


################ Initial turnup of a jumbo ################################################################
* * TURNUP 

	if ($station = "JUMBOID" or $station = "PMCO" or 
	    $station = "RLRJ" or $station = "RLJC" or
	    $station = "PMSC" or $station = "PMRR" or $station = "PMEM") then

# J for Jumbo
	let type_code = "J";
	let unit_id = $jumbo_id;

	let ts_transaction = $ts_turned_up;	
	let wgt_net = $wgt_act;
	let area_net = (($width_act / $LengthToWidthFactor) * $length_lineal ) / 1000 ;
# Get the machine of the run
	let mill_id_plan = $mill_id;
	let mach_type_plan = $mach_type_plan;
	let mach_id_plan = $mach_id_plan;

	call ACSInsertUnitRoute();
	call ACSInsertCostClosure();
	call ACSInsertStdRMCons();
	call ACSInsertTransLog();
	Call ACSInsertStdRouteJumbo();
# 13	
#	call ACSGetRealCons();
# 13

	end if

################ Unturnup of a jumbo ################################################################
* * UNTURNUP 

      IF ($station <> "CHECKER") THEN

# J for Jumbo
	let type_code = "J";
	let unit_id = $jumbo_id;
	call ACSDeleteStdRMCons();
	call ACSDeleteUnitRouteAll();
	call ACSDeleteCostClosure();
	call ACSInsertTransLog();
	Call ACSDeleteStdRouteJumbo();
# 13	
	call ACSDelRealCons();
# 13

	END IF

################ Jumbo modified ################################################################
* * MODAFTER 

# J for Jumbo
		let type_code = "J";
		let unit_id = $jumbo_id;

######## If the jumbo has not been used yet, ajust the values in acs_unit_route for later allocation .
	select count(*) cnt 
		from splices
		where parent_id = $unit_id;
	if ($cnt = 0) then

# Save the values before deleting the records
		let save_ts_transaction = $ts_turned_up;	
		let save_wgt_net = $wgt_act;
		let save_area_net = (($width_act / $LengthToWidthFactor) * $length_lineal ) / 1000 ;
# Get the machine of the run
		let save_mill_id_plan = $mill_id;
		let save_mill_id = $mill_id;
		let save_mach_type_plan = $mach_type_plan;
		let save_mach_id_plan = $mach_id_plan;

# Clean the data from first turnup
		call ACSDeleteStdRMCons();
		call ACSDeleteUnitRouteAll();
		call ACSDeleteCostClosure();
		call ACSDeleteStdRouteJumbo();

# Set back the values
		let ts_transaction = $save_ts_transaction;	
		let wgt_net = $save_wgt_net;
		let area_net = $save_area_net;
		let mill_id = $save_mill_id;
		let mill_id_plan = $save_mill_id_plan;
		let mach_type_plan = $save_mach_type_plan;
		let mach_id_plan = $save_mach_id_plan;

# Re-create the data
		let mx_action_code = "TURNUP";
		call ACSInsertUnitRoute();
		call ACSInsertCostClosure();
		call ACSInsertStdRMCons();
		call ACSInsertStdRouteJumbo();

# Create a record into acs_trans_log
		call ACSInsertTransLog();
	end if

* * CONSUME

		select splices.machine_id x
			from jumbo, splices
			where jumbo.jumbo_id = splices.unit_id
			and splices.parent_id = $jumbo_id;

		let jchild_success = $success;
		
		select splices.machine_id x
			from invent, splices
			where invent.unit_id = splices.unit_id
			and splices.parent_id = $jumbo_id;

		let ichild_success = $success;
		
		IF ($jchild_success = 1 or $ichild_success = 1) THEN
#15 When consumed from the winder, the reject code is in reject_id_2
			if ($mach_type_rej = "WD") then
				let reject_id = $reject_id_2;
			end if	
			Call ACSGenealogyPerc();
		ELSE
			call BeaterAcsGenealogyPerc();
		END IF

		let unit_id = $jumbo_id;
		call ACSInsertTransLog();
#3
* * UNCONSUME
		let parent1 = $jumbo_id;
		call DelACSGenealogyPerc();
		let unit_id = $jumbo_id;
		call ACSInsertTransLog();



#===============================================================================
# Included Routines
#===============================================================================
	INCLUDE "acs_subroutines";
	INCLUDE "acs_unit_route";
	INCLUDE "acs_genealogy_perc";
	INCLUDE "acs_rm_standard";
	INCLUDE "acs_unit_route_std";
